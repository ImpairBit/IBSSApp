{"version":3,"sources":["./src/app/config.ts","./src/app/services/auth.service.ts","./src/app/enums/api.enum.ts","./src/app/page-not-found/page-not-found.component.ts","./src/app/page-not-found/page-not-found.component.html","./src/app/policies/faq/faq.component.ts","./src/app/policies/faq/faq.component.html","./src/app/policies/terms/terms.component.ts","./src/app/policies/terms/terms.component.html","./src/app/services/auth-resolve.service.ts","./src/app/services/auth-guard.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/services/authorised-side-nav.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["CONFIG","endPoint","LOGIN","this","authURL","RESOURCES","resourceURL","value","showLoader","isLoggedin","isView","isMenuVisible","imageFormats","app","name","tag","siteURL","viewURL","previewURL","token","user","login","isNavHidden","menuItems","regEx","email","password","colorPicker","Width","Height","tinyMCEKey","googleFonts","AuthService","http","router","toastr","config","_oauthUrl","getBaseURL","_loginUrl","_signupUrl","_generateOTPUrl","_verifyOTPUrl","_forgotPwdUrl","_changePwdUrl","username","isSignup","headers","append","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","post","subscribe","res","err","error","access_token","get","processLoginResponse","success","serviceData","pwd","navigate","localStorage","setItem","JSON","stringify","signupData","sesssion","getItem","length","ibssApp","parse","url","indexOf","payload","put","clear","setTimeout","toggleLoader","API","PageNotFoundComponent","FaqComponent","TermsComponent","AuthResolver","sessionVal","of","AuthGuard","authRes","route","state","resolve","routes","path","loadChildren","then","m","AuthModule","auth","HomeModule","canActivate","ViewModule","component","redirectTo","AppRoutingModule","forRoot","onSameUrlNavigation","AppComponent","title","Error","AuthorisedSideNavService","hideSideNav","AppModule","extras","lazyRender","bootstrapModule","catch","console","webpackEmptyAsyncContext","req","Promise","e","code","keys","module","exports","id"],"mappings":"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","file":"main.js","sourcesContent":["import { API } from './enums/api.enum'\r\nexport class CONFIG {\r\n    public static isLoggedin: boolean = false;\r\n    public static isView: boolean = false;\r\n    public static showLoader: boolean = false;\r\n    public static isMenuVisible: boolean = false;\r\n    public static imageFormats = [\r\n        \"png\",\r\n        \"jpg\",\r\n        \"jpeg\",\r\n        \"gif\"\r\n    ];\r\n    public static app = {\r\n        name: \"Techintent\",\r\n        tag: \"All your Techincal needs under one roof\"\r\n    }\r\n\r\n    public static siteURL: string = \"http://techintent.in/\"; // PROD \r\n    public static viewURL: string = \"/view/\";  \r\n    public static previewURL: string = \"/preview/\"; \r\n    //SIT - API \r\n    public static authURL: string = \"http://auth.sit.techintent.in/\";\r\n    public static resourceURL: string = \"http://app.sit.techintent.in/\";\r\n\r\n    public static getBaseURL(endPoint:string) {\r\n        switch (endPoint) {\r\n            case API.LOGIN: return this.authURL + 'oauth/token';\r\n            case API.RESOURCES: return this.resourceURL + 'api/resources';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n\r\n    public static toggleLoader(value:any) {\r\n        if (this.showLoader != value) {\r\n            this.showLoader = value;\r\n        }\r\n    }\r\n\r\n    public static token: any = null;\r\n    public static user: any = null;\r\n    public static login: any = null;\r\n    public static isNavHidden: any = false;\r\n    public static menuItems: any = [];\r\n    public static regEx: any = {\r\n        email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n        password: /^(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,20}$/\r\n    };\r\n\r\n    public static colorPicker: any = {\r\n        Width: \"35px\",\r\n        Height: \"35px\"\r\n    };\r\n\r\n    public static tinyMCEKey = \"ntsffe3tewhv2cg06hfn7j7724rkgn6jn2usbpwfjczmbn5b\";\r\n    public static googleFonts = \"AIzaSyABmVNHFtkFEkrNJ_LXhFRXxYnhHl0uVFw\";\r\n\r\n    \r\n \r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { CONFIG } from '../config';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { API } from '../enums/api.enum';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    config: typeof CONFIG = CONFIG;\r\n    _oauthUrl = this.config.getBaseURL(API.LOGIN);\r\n    _loginUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/login\";\r\n    _signupUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/register\";\r\n    _generateOTPUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/generateOtp\";\r\n    _verifyOTPUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/verifyOtp\";\r\n    _forgotPwdUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/forgotPassword\";\r\n    _changePwdUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/changePassword\";\r\n    constructor(\r\n        public http: HttpClient,\r\n        public router: Router,\r\n        public toastr: ToastrService\r\n    ) { }\r\n\r\n    getToken(username:string, password:string, isSignup = false) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/x-www-form-urlencoded');\r\n        headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n        headers = headers.append('Authorization', 'Basic aW1wYWlyYml0OmltcGFpcmJpdEAyMDIw');\r\n        headers = headers.append('X-Requested-With', 'XMLHttpRequest');\r\n        headers = headers.append(\"X-HTTP-Method\", \"POST\");\r\n\r\n        var details: any = {\r\n            'username': username,\r\n            'password': password,\r\n            'grant_type': \"password\"\r\n        };\r\n\r\n        var formBody: any = [];\r\n        for (var property in details) {\r\n            var encodedKey = encodeURIComponent(property);\r\n            var encodedValue = encodeURIComponent(details[property]);\r\n            formBody.push(encodedKey + \"=\" + encodedValue);\r\n        }\r\n        formBody = formBody.join(\"&\");\r\n        this.http.post(this._oauthUrl, formBody, { headers: headers })\r\n            .subscribe(res => {\r\n                this.login(res, username, password, isSignup);\r\n            }, err => {\r\n                //this.processLoginResponse(err);\r\n                this.toastr.error(\"Login Failed, Please provide valid credentials\");\r\n            });\r\n    }\r\n\r\n    login(token:any, username:string, password:string, isSignup = false) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append('Authorization', 'Bearer ' + token.access_token);\r\n        headers = headers.append(\"X-HTTP-Method\", \"GET\");\r\n\r\n        this.http.get(this._loginUrl, { headers: headers })\r\n            .subscribe((res: any) => {\r\n                this.processLoginResponse(token, res, username, password, isSignup);\r\n            }, (err: any) => {\r\n                this.toastr.error(\"Login Failed, Please provide valid credentials\");\r\n            });\r\n    }\r\n\r\n    processLoginResponse(token:any, res:any, username:string, password:string, isSignup = false) {\r\n\r\n        if (isSignup) {\r\n            this.toastr.success('Registered Successfully. Kindly login to proceed');\r\n        } else {\r\n            this.toastr.success('Login Successfull');\r\n        }\r\n        \r\n        this.config.token = token;\r\n        this.config.user = res.serviceData;\r\n        this.config.login = {\r\n            email:username,\r\n            pwd:password\r\n        };\r\n        this.config.isLoggedin = true;\r\n        this.router.navigate(['/main']);\r\n        const ibssApp = {\r\n            login : {\r\n                email:username,\r\n                pwd:password\r\n            },\r\n            token: token,\r\n            res: res\r\n        }\r\n        localStorage.setItem(\"ibssApp\", JSON.stringify(ibssApp));\r\n    }\r\n\r\n    signup(signupData:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append('Authorization', 'Basic aW1wYWlyYml0OmltcGFpcmJpdEAyMDIw');\r\n        headers = headers.append(\"X-HTTP-Method\", \"POST\");\r\n\r\n\r\n        // var formBody: any = [];\r\n        // for (var property in signupData) {\r\n        //     var encodedKey = encodeURIComponent(property);\r\n        //     var encodedValue = encodeURIComponent(signupData[property]);\r\n        //     formBody.push(encodedKey + \"=\" + encodedValue);\r\n        // }\r\n        // formBody = formBody.join(\"&\");\r\n        return this.http.post(this._signupUrl, signupData, { headers: headers });\r\n    }\r\n\r\n    checkToken() {\r\n        const sesssion = localStorage.getItem(\"ibssApp\");\r\n\r\n        if (sesssion && sesssion.length > 0) {\r\n            const ibssApp = JSON.parse(sesssion);\r\n            if (ibssApp) {\r\n                this.config.token = ibssApp.token;\r\n                this.config.user = ibssApp.res.serviceData;\r\n                this.config.isLoggedin = true;\r\n            }\r\n        }\r\n\r\n        if (this.config.isLoggedin && this.router.url.indexOf('get-started') > -1) {\r\n            this.router.navigate(['/main']);\r\n        }\r\n    }\r\n\r\n    generateOTP(payload:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append(\"X-HTTP-Method\", \"POST\");\r\n        return this.http.post(this._generateOTPUrl, payload, { headers: headers });\r\n    }\r\n\r\n    verfiyOTP(payload:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append(\"X-HTTP-Method\", \"PUT\");\r\n        return this.http.put(this._verifyOTPUrl, payload, { headers: headers });\r\n    }\r\n\r\n    forgotPassword(payload:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append(\"X-HTTP-Method\", \"PUT\");\r\n        return this.http.put(this._forgotPwdUrl, payload, { headers: headers });\r\n    }\r\n\r\n    changePassword(payload:any) {\r\n        let ibssApp: any = localStorage.getItem(\"ibssApp\");\r\n\r\n        if (ibssApp) {\r\n          ibssApp = JSON.parse(ibssApp);\r\n        }\r\n    \r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append('Authorization', 'Bearer ' + ibssApp.token.access_token);\r\n        headers = headers.append(\"X-HTTP-Method\", \"PUT\");\r\n        return this.http.put(this._changePwdUrl, payload, { headers: headers });\r\n    }\r\n\r\n    logout() {\r\n        localStorage.clear();\r\n        setTimeout(()=> {\r\n            this.config.token = null;\r\n            this.config.user = null;\r\n            this.config.isLoggedin = false;\r\n            this.config.toggleLoader(false);\r\n          this.router.navigate(['/']);\r\n        },1000);\r\n      }\r\n}","export enum API {\r\n    LOGIN = 'LOGIN',\r\n    RESOURCES = 'RESOURCES'\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CONFIG } from 'src/app/config';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss']\n})\nexport class PageNotFoundComponent implements OnInit {\n  \n  config: typeof CONFIG = CONFIG;\n  constructor(\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    if (!this.config.isView && this.config.isLoggedin) {\n      this.router.navigate['/dashboard'];\n    }\n  }\n\n}\n","\n<div class=\"error-page jumbotron\">\n  <div class=\"error-content text-center\">\n    <h1 class=\"headline text-warning\"><i class=\"fas fa-exclamation-triangle text-warning\"></i> 404</h1>\n    <h3>Oops! Page not found.</h3>\n    <p>\n      We could not find the page you were looking for.\n      Meanwhile, you may <a href=\"/\">return to HOME</a>\n    </p>\n  </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ibss-faq',\n  templateUrl: './faq.component.html',\n  styleUrls: ['./faq.component.scss']\n})\nexport class FaqComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>faq works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ibss-terms',\n  templateUrl: './terms.component.html',\n  styleUrls: ['./terms.component.scss']\n})\nexport class TermsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"ibss-terms  container-fluid p-0\">\n    <div class=\"container p-4 bg-white shadow-lg border-end border-start\">\n        <img class=\"my-3 logo-img\" src=\"../../../assets/tech-intent-logo.svg\">\n        <br/>\n        <div class=\"mt-4\">\n            <h4 class=\"headers\">About</h4>\n            <div>TechIntent is a website Builder service founded on the belief that anyone should have the tools to take their business from idea to launch to growth.</div>\n            <br/>\n            <div>Whether you're starting an online business from scratch or taking your in-person business online, with TechIntent, entrepreneurs can build websites that customers love to visit and explore. Our powerful tools make it easy to build a professional, mobile-optimized site and grow your business with integrated marketing and advanced analytics. We also help you tackle the manual hassles of running a successful online business.</div>\n        </div>\n        <div class=\"mt-4\">\n            <h4 class=\"headers\">TechIntent Agreement</h4>\n            <div>By using the TechIntent website builder services (hereinafter the \"Services,\" defined further below), you signify your agreement to the terms and conditions contained in this TechIntent Website Builder Agreement (hereinafter, the \"Agreement\"). This Agreement is between you, your organization (if you are entering into this Agreement on behalf of an organization), collectively referred to herein as \"you\" or \"your\" (and appropriate formatives) and Name.com, Inc. (the \"Service Provider\").</div>\n            <ol>\n                <li>This Agreement may be modified from time to time. Modifications made to this Agreement will become effective 30 days after the modifications are posted. This Agreement shall be posted through the interface which you use to configure and/or otherwise order the Services (the \"Services Interface\"). You agree that you will check the terms and conditions of this Agreement periodically and that, if you no longer agree to the terms and conditions, you will stop using the Services and that you will terminate the Services as described below in Section 8.</li>\n                <li>The Services consist of theTechIntent website builder package with the specific configuration which you selected or are going to select through the Services Interface as you use the Services. You acknowledge and understand that important service limitations (including capacity matrices), pricing, the term of the Service, payment terms, and other conditions relating to the Services are conveyed through the Services Interface and are hereby incorporated into this Agreement.</li>\n                <li>Each website created using the Services is built on and integrated with Service Provider’s hosting platform, and any attempt to migrate or otherwise.</li>\n                <li>Except for the content provided by you, each website created using the Services belongs to the Service Provider. For the duration of your Services subscription, Service Provider grants you a personal license in each website you create using the Services. Cancellation of the Services for any reason terminates your license to each website.</li>\n                <li>As part of the Services, you may be allowed to use certain photographs, illustrations, or other images developed, owned, or licensed by third-party providers (“Images”). The Images are neither sold nor distributed to you and you may use the Images solely as part of the Services. In addition, you may not remove, modify, or obscure any copyright, trademark, or other proprietary rights notices that are contained in or on the Images, and you may not create derivative works of the Images. Service Provider has the right, at any time, at Service Provider’s sole and exclusive discretion, to remove any Image(s) from your website.</li>\n                <li>By uploading content for your website, you grant Service Provider a nonexclusive, worldwide, sublicensable, royalty-free license: (i) to use the content for the purpose of including it in your website, and (ii) to display screenshots of any website created using the Services, in marketing materials, or in other manners as determined by Service Provider in its sole discretion. You represent and warrant that: (y) you have all necessary rights to use such content, and (z) the content does not violate the intellectual property rights or other rights of any third party. As used in this Section, “content” means all information, data, code, text, software, music, sound, photographs, illustrations, graphics, video, messages, or other materials you provide to the Service Provider in connection with the Services.</li>\n                <li>You agree that you may not downgrade (reduce) the capacity matrices of the Services below the level of actual use of the Services which you experienced in the current or previous month.</li>\n                <li>Your use of the Services may be suspended and/or this Agreement may be terminated if the Service Provider determines that you are or are alleged to be violating the terms and conditions of this Agreement or any other agreement entered into by you and Service Provider. In the event of termination or suspension of Services under such circumstances, you agree (i) that no pre-paid fees will be refunded to you and (ii) that Service Provider may take control of any domain name associated with the terminated Services, provided such domain name was registered through the domain name registration services of Service Provider. You understand that taking control of a domain name includes, without limitation, acts such as listing such controlling parties as the \"registrant\" and/or \"administrative contact\" for the domain name and controlling the DNS settings for the domain name.</li>\n                <li>Service Provider may elect to terminate this Agreement without cause and discontinue the Services upon 30 days notice, whereupon any pre-paid fees for an unused portion of a service term shall be refunded to you within a reasonable period of time. You further agree that, within 30 days of your initial enrolment to receive the Services, Service Provider may elect to terminate this Agreement without cause and that, in such event, the termination shall take effect immediately and that any pre-paid fees for an unused portion of your service term shall be refunded to you within a reasonable period of time.</li>\n                <li>The Services are provided through an infrastructure which is shared by all users of the Services. Your use of the Services may be throttled or suspended indefinitely if your use of the Services degrades the ability of Service Provider to provide the Services to other users of the Services.</li>\n                <li>You acknowledge that email and/or online communication systems (chat, account notices, etc.) will be the primary means of communication between yourself and Service Provider. You acknowledge that it is your responsibility to maintain a current email address and physical mailing address in your contact information. You further agree that you will regularly login to your account to obtain any notices posted through the Services Interface. You agree that your failure to respond to a communication from Service Provider may result in suspension or cancellation of Services without any refund of pre-paid fees, if any.</li>\n                <li>You acknowledge that the Service Provider is not obligated to return any data to you upon termination of this Agreement. You acknowledge that it is your responsibility to download, make copies of, and/or backup all data residing on the servers and other equipment which provide the Services and to do so within the bandwidth limitations of the Services. You acknowledge that any loss or corruption of data which occurs due to an interruption in the Services, regardless of the cause of the interruption, shall not be the responsibility of Service Provider and that you may, following an interruption in the Services, be required to upload the data to the servers and other equipment which provide the Services.</li>\n                <li>You agree that any personally identifying information provided by you shall be used by the Service Provider according to the privacy policy.</li>\n                <li>You represent and warrant as follows: that (i) you are lawfully entitled to use, display, posses, or access the data uploaded, linked to, framed, or otherwise posted on your website by you and/or by the users of your website; (ii) your website and your use of the Services will not infringe the intellectual property rights of any third party; (iii) your website and your use of the Services will not violate any laws, including, without limitation, laws relating to unsolicited commercial email, pornography, collection of identifying information, consumer protection, and privacy; (iv) neither you nor those who access your website will upload any worms, virus, or malicious code to the servers which provide the Services; and (v) your website and your use of the Services will not subject Service Provider to any claims by any third party, including claims relating to infringement of intellectual property rights or claims relating to the products or services which you may provide or offer through the website hosted through the Services.</li>\n                <li>You further represent and warrant that you will not allow any unauthorized third party to access the account which you use to access the Services.</li>\n                <li>You further agree that the Service Provider may post google ads or promote any of the service provider products or any other third party products to your website or services, if you're using the Services Interface as free of cost.</li>\n                <li>You agree that in order to avoid any kind of advertisements of google ads you will be using paid services, If not you don't have rights to complain on any advertisements or google ads posted by Service Provider.</li>\n                <li>NO REMEDIES FOR UNPLANNED SERVICE INTERRUPTIONS: SERVICE PROVIDER DISCLAIMS ANY WARRANTY THAT THE SERVICES WILL BE UNINTERRUPTED, TIMELY, AND/OR ERROR-FREE. You agree that any unplanned or unannounced interruptions in the Services shall not require a remedy.</li>\n                <li>LIMITATION OF LIABILITY: YOU AGREE THAT SERVICE PROVIDER WILL NOT BE LIABLE FOR ANY (A) SUSPENSION OR LOSS OF THE SERVICES; (B) INTERRUPTION OF BUSINESS; (C) ACCESS DELAYS OR ACCESS INTERRUPTIONS TO THE WEB SITE(S) PROVIDED THROUGH OR BY THE SERVICES; (D) LOSS OR LIABILITY RESULTING FROM ACTS OF GOD; (E) DATA NON-DELIVERY, MIS-DELIVERY, CORRUPTION, DESTRUCTION OR OTHER MODIFICATION; (F) EVENTS BEYOND THE CONTROL OF SERVICE PROVIDER; (G) THE PROCESSING OF YOUR APPLICATION FOR THE SERVICES; OR (H) LOSS OR LIABILITY RESULTING FROM THE UNAUTHORIZED USE OR MISUSE OF YOUR ACCOUNT IDENTIFIER OR PASSWORD. YOU FURTHER AGREE THAT SERVICE PROVIDER WILL NOT BE LIABLE FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY KIND (INCLUDING LOST PROFITS) REGARDLESS OF THE FORM OF ACTION WHETHER IN CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, REGARDLESS OF WHETHER OR NOT SERVICE PROVIDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. IN NO EVENT SHALL THE MAXIMUM AGGREGATE LIABILITY OF SERVICE PROVIDER EXCEED THE TOTAL AMOUNT PAID BY YOU FOR THE SERVICES FOR A 1-MONTH PERIOD, BUT IN NO EVENT GREATER THAN $100. BECAUSE SOME STATES DO NOT ALLOW THE EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, IN SUCH STATES, THE LIABILITY OF SERVICE PROVIDER SHALL BE LIMITED TO THE MAXIMUM EXTENT PERMITTED BY LAW.</li>\n                <li>INDEMNIFICATION: YOU AGREE TO RELEASE, INDEMNIFY, AND HOLD SERVICE PROVIDER, ITS CONTRACTORS, AGENTS, EMPLOYEES, OFFICERS, DIRECTORS AND AFFILIATES HARMLESS FROM ALL LIABILITIES, CLAIMS AND EXPENSES, INCLUDING ATTORNEY'S FEES AND COURT COSTS, FOR THIRD PARTY CLAIMS RELATING TO YOUR USE OF THE SERVICES OR ARISING UNDER THIS AGREEMENT, INCLUDING WITHOUT LIMITATION, INFRINGEMENT BY YOU OR SOMEONE ELSE USING YOUR COMPUTER, OF ANY INTELLECTUAL PROPERTY OR OTHER PROPRIETARY RIGHT OF ANY PERSON OR ENTITY, OR FROM THE VIOLATION OF ANY TERM OR CONDITION OF THIS AGREEMENT. WHEN SERVICE PROVIDER MAY BE INVOLVED IN A SUIT INVOLVING A THIRD PARTY AND WHICH IS RELATED TO THE SERVICES UNDER THIS AGREEMENT, EITHER SERVICE PROVIDER MAY SEEK WRITTEN ASSURANCES FROM YOU IN WHICH YOU PROMISE TO INDEMNIFY AND HOLD SUCH PARTIES HARMLESS FROM THE COSTS AND LIABILITIES DESCRIBED IN THIS PARAGRAPH. SUCH WRITTEN ASSURANCES MAY INCLUDE THE POSTING OF PERFORMANCE BONDS OR OTHER GUARANTEES. YOUR FAILURE TO PROVIDE SUCH ASSURANCES MAY BE CONSIDERED A MATERIAL BREACH OF THIS AGREEMENT BY YOU.</li>\n                <li>DISCLAIMER OF WARRANTIES: SERVICE PROVIDER DOES NOT MAKE ANY REPRESENTATIONS OR WARRANTIES OF ANY KIND WHATSOEVER, EXPRESS OR IMPLIED, IN CONNECTION WITH THIS AGREEMENT OR THE SERVICES, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, UNLESS SUCH REPRESENTATIONS AND WARRANTIES ARE NOT LEGALLY EXCLUDABLE. YOU UNDERSTAND AND AGREE THAT ANY MATERIAL AND/OR DATA DOWNLOADED OR OTHERWISE OBTAINED THROUGH THE USE OF THE SERVICE IS DONE AT YOUR OWN DISCRETION AND RISK AND THAT YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA THAT RESULTS FROM THE DOWNLOAD OF SUCH MATERIAL AND/OR DATA. NO ADVICE OR INFORMATION, WHETHER ORAL OR WRITTEN, OBTAINED BY YOU FROM SERVICE PROVIDER SHALL CREATE ANY WARRANTY NOT EXPRESSLY MADE HEREIN. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES, SO SOME OF THE ABOVE EXCLUSIONS MAY NOT APPLY TO YOU.</li>\n            </ol>\n        </div>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { CONFIG } from '../config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthResolver implements Resolve<Observable<boolean>> {\r\n    config: typeof CONFIG = CONFIG;\r\n\r\n  resolve(): Observable<any> {\r\n    let sessionVal: any = localStorage.getItem(\"ibssApp\");\r\n\r\n    if (sessionVal) {\r\n        sessionVal = JSON.parse(sessionVal);\r\n        localStorage.setItem(\"ibssApp\",JSON.stringify(sessionVal));\r\n        this.config.token = sessionVal.token;\r\n        this.config.user = sessionVal.res.serviceData;\r\n        this.config.login = sessionVal.login;\r\n        this.config.isLoggedin = true;\r\n        return of(true);\r\n    }\r\n    return of(false);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { CONFIG } from '../config';\r\nimport { AuthResolver } from './auth-resolve.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n    config: typeof CONFIG = CONFIG;\r\n    constructor(\r\n      public router: Router,\r\n      public authRes: AuthResolver\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n      return this.authRes.resolve();\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\r\nimport { FaqComponent } from './policies/faq/faq.component';\r\nimport { TermsComponent } from './policies/terms/terms.component';\r\nimport { AuthGuard } from './services/auth-guard.service';\r\nimport { AuthResolver } from './services/auth-resolve.service';\r\n\r\nconst routes: Routes = [\r\n  { path: '', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule), resolve:{ auth: AuthResolver}},\r\n  { path: 'main', loadChildren: () => import('./home/home.module').then(m => m.HomeModule), canActivate: [AuthGuard] }, //\r\n  { path: 'view/:Id', loadChildren: () => import('./view/view.module').then(m => m.ViewModule) },\r\n  { path: 'preview/:Id', loadChildren: () => import('./view/view.module').then(m => m.ViewModule), canActivate: [AuthGuard]},//, canActivate: [AuthGuard] \r\n  { path: 'templateview/:Id', loadChildren: () => import('./view/view.module').then(m => m.ViewModule), canActivate: [AuthGuard]},//, canActivate: [AuthGuard] \r\n  { path: 'terms', component: TermsComponent },\r\n  { path: 'faq', component: FaqComponent },\r\n  { path: '404', component: PageNotFoundComponent },\r\n  { path: '**', redirectTo: '' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes,  {onSameUrlNavigation: 'reload'})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","<router-outlet></router-outlet>\r\n<div class=\"preloader\" *ngIf='config?.showLoader === true'>\r\n    <div class=\"jumper\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n</div>","import { Component, ViewEncapsulation } from '@angular/core';\nimport { CONFIG } from './config';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title(title: any) {\n    throw new Error('Method not implemented.');\n  }\n  config: typeof CONFIG = CONFIG;\n}\n","import { Injectable } from '@angular/core';\r\nimport { CONFIG } from '../config';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthorisedSideNavService {\r\n    hideSideNav: boolean = false;\r\n    config: typeof CONFIG = CONFIG;\r\n    constructor() { }\r\n\r\n    toggleSideNav(): void {\r\n        this.hideSideNav = !this.hideSideNav;\r\n        this.config.isNavHidden = this.hideSideNav;\r\n    }\r\n}","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AuthGuard } from './services/auth-guard.service';\r\nimport { AuthService } from './services/auth.service';\r\nimport { AuthorisedSideNavService } from './services/authorised-side-nav';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\nimport { CarouselModule } from 'ngx-owl-carousel-o';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { AutofocusDirective } from './directives/autofocus.directive';\r\nimport { AuthResolver } from './services/auth-resolve.service';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    AutofocusDirective\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot(),\r\n    CarouselModule,\r\n    ColorPickerModule,\r\n    FormlyModule.forRoot({ extras: { lazyRender: true } }),\r\n    FormlyBootstrapModule    \r\n  ],\r\n  providers: [HttpClientModule, AuthService, AuthGuard, AuthorisedSideNavService, AuthResolver],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}