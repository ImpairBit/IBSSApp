{"version":3,"sources":["./src/app/config.ts","./src/app/services/auth.service.ts","./src/app/enums/api.enum.ts","./src/app/page-not-found/page-not-found.component.ts","./src/app/page-not-found/page-not-found.component.html","./src/app/policies/faq/faq.component.ts","./src/app/policies/faq/faq.component.html","./src/app/policies/terms/terms.component.ts","./src/app/policies/terms/terms.component.html","./src/app/services/auth-resolve.service.ts","./src/app/services/auth-guard.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/services/authorised-side-nav.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["CONFIG","endPoint","LOGIN","this","authURL","RESOURCES","resourceURL","value","showLoader","isLoggedin","isView","isMenuVisible","app","name","tag","siteURL","viewURL","previewURL","token","user","login","isNavHidden","menuItems","regEx","email","password","colorPicker","Width","Height","tinyMCEKey","googleFonts","AuthService","http","router","toastr","config","_oauthUrl","getBaseURL","_loginUrl","_signupUrl","_generateOTPUrl","_verifyOTPUrl","_forgotPwdUrl","_changePwdUrl","username","headers","append","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","post","subscribe","res","err","error","access_token","get","processLoginResponse","success","serviceData","pwd","navigate","localStorage","setItem","JSON","stringify","signupData","sesssion","getItem","length","ibssApp","parse","url","indexOf","payload","put","clear","setTimeout","toggleLoader","API","PageNotFoundComponent","FaqComponent","TermsComponent","AuthResolver","sessionVal","of","AuthGuard","authRes","route","state","resolve","routes","path","loadChildren","then","m","AuthModule","auth","HomeModule","canActivate","ViewModule","component","redirectTo","AppRoutingModule","forRoot","onSameUrlNavigation","AppComponent","title","Error","AuthorisedSideNavService","hideSideNav","AppModule","extras","lazyRender","bootstrapModule","catch","console","webpackEmptyAsyncContext","req","Promise","e","code","keys","module","exports","id"],"mappings":"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","file":"main.js","sourcesContent":["import { API } from './enums/api.enum'\r\nexport class CONFIG {\r\n    public static isLoggedin: boolean = false;\r\n    public static isView: boolean = false;\r\n    public static showLoader: boolean = false;\r\n    public static isMenuVisible: boolean = false;\r\n    public static app = {\r\n        name: \"Techintent\",\r\n        tag: \"All your Techincal needs under one roof\"\r\n    }\r\n\r\n    public static siteURL: string = \"http://techintent.in/\"; // PROD \r\n    public static viewURL: string = \"/view/\";  \r\n    public static previewURL: string = \"/preview/\"; \r\n    //SIT - API \r\n    public static authURL: string = \"http://auth.sit.techintent.in/\";\r\n    public static resourceURL: string = \"http://app.sit.techintent.in/\";\r\n\r\n    public static getBaseURL(endPoint:string) {\r\n        switch (endPoint) {\r\n            case API.LOGIN: return this.authURL + 'oauth/token';\r\n            case API.RESOURCES: return this.resourceURL + 'api/resources';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n\r\n    public static toggleLoader(value:any) {\r\n        if (this.showLoader != value) {\r\n            this.showLoader = value;\r\n        }\r\n    }\r\n\r\n    public static token: any = null;\r\n    public static user: any = null;\r\n    public static login: any = null;\r\n    public static isNavHidden: any = false;\r\n    public static menuItems: any = [];\r\n    public static regEx: any = {\r\n        email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n        password: /^(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,20}$/\r\n    };\r\n\r\n    public static colorPicker: any = {\r\n        Width: \"35px\",\r\n        Height: \"35px\"\r\n    };\r\n\r\n    public static tinyMCEKey = \"ntsffe3tewhv2cg06hfn7j7724rkgn6jn2usbpwfjczmbn5b\";\r\n    public static googleFonts = \"AIzaSyABmVNHFtkFEkrNJ_LXhFRXxYnhHl0uVFw\";\r\n \r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { CONFIG } from '../config';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { API } from '../enums/api.enum';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    config: typeof CONFIG = CONFIG;\r\n    _oauthUrl = this.config.getBaseURL(API.LOGIN);\r\n    _loginUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/login\";\r\n    _signupUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/register\";\r\n    _generateOTPUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/generateOtp\";\r\n    _verifyOTPUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/verifyOtp\";\r\n    _forgotPwdUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/forgotPassword\";\r\n    _changePwdUrl = this.config.getBaseURL(API.RESOURCES) + \"/user/changePassword\";\r\n    constructor(\r\n        public http: HttpClient,\r\n        public router: Router,\r\n        public toastr: ToastrService\r\n    ) { }\r\n\r\n    getToken(username:string, password:string) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/x-www-form-urlencoded');\r\n        headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n        headers = headers.append('Authorization', 'Basic aW1wYWlyYml0OmltcGFpcmJpdEAyMDIw');\r\n        headers = headers.append('X-Requested-With', 'XMLHttpRequest');\r\n        headers = headers.append(\"X-HTTP-Method\", \"POST\");\r\n\r\n        var details: any = {\r\n            'username': username,\r\n            'password': password,\r\n            'grant_type': \"password\"\r\n        };\r\n\r\n        var formBody: any = [];\r\n        for (var property in details) {\r\n            var encodedKey = encodeURIComponent(property);\r\n            var encodedValue = encodeURIComponent(details[property]);\r\n            formBody.push(encodedKey + \"=\" + encodedValue);\r\n        }\r\n        formBody = formBody.join(\"&\");\r\n        this.http.post(this._oauthUrl, formBody, { headers: headers })\r\n            .subscribe(res => {\r\n                this.login(res, username, password);\r\n            }, err => {\r\n                //this.processLoginResponse(err);\r\n                this.toastr.error(\"Login Failed, Please provide valid credentials\");\r\n            });\r\n    }\r\n\r\n    login(token:any, username:string, password:string) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append('Authorization', 'Bearer ' + token.access_token);\r\n        headers = headers.append(\"X-HTTP-Method\", \"GET\");\r\n\r\n        this.http.get(this._loginUrl, { headers: headers })\r\n            .subscribe((res: any) => {\r\n                this.processLoginResponse(token, res, username, password);\r\n            }, (err: any) => {\r\n                this.toastr.error(\"Login Failed, Please provide valid credentials\");\r\n            });\r\n    }\r\n\r\n    processLoginResponse(token:any, res:any, username:string, password:string) {\r\n        this.toastr.success('Login Successfull');\r\n        this.config.token = token;\r\n        this.config.user = res.serviceData;\r\n        this.config.login = {\r\n            email:username,\r\n            pwd:password\r\n        };\r\n        this.config.isLoggedin = true;\r\n        this.router.navigate(['/main']);\r\n        const ibssApp = {\r\n            login : {\r\n                email:username,\r\n                pwd:password\r\n            },\r\n            token: token,\r\n            res: res\r\n        }\r\n        localStorage.setItem(\"ibssApp\", JSON.stringify(ibssApp));\r\n    }\r\n\r\n    signup(signupData:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append('Authorization', 'Basic aW1wYWlyYml0OmltcGFpcmJpdEAyMDIw');\r\n        headers = headers.append(\"X-HTTP-Method\", \"POST\");\r\n\r\n\r\n        // var formBody: any = [];\r\n        // for (var property in signupData) {\r\n        //     var encodedKey = encodeURIComponent(property);\r\n        //     var encodedValue = encodeURIComponent(signupData[property]);\r\n        //     formBody.push(encodedKey + \"=\" + encodedValue);\r\n        // }\r\n        // formBody = formBody.join(\"&\");\r\n        return this.http.post(this._signupUrl, signupData, { headers: headers });\r\n    }\r\n\r\n    checkToken() {\r\n        const sesssion = localStorage.getItem(\"ibssApp\");\r\n\r\n        if (sesssion && sesssion.length > 0) {\r\n            const ibssApp = JSON.parse(sesssion);\r\n            if (ibssApp) {\r\n                this.config.token = ibssApp.token;\r\n                this.config.user = ibssApp.res.serviceData;\r\n                this.config.isLoggedin = true;\r\n            }\r\n        }\r\n\r\n        if (this.config.isLoggedin && this.router.url.indexOf('get-started') > -1) {\r\n            this.router.navigate(['/main']);\r\n        }\r\n    }\r\n\r\n    generateOTP(payload:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append(\"X-HTTP-Method\", \"POST\");\r\n        return this.http.post(this._generateOTPUrl, payload, { headers: headers });\r\n    }\r\n\r\n    verfiyOTP(payload:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append(\"X-HTTP-Method\", \"PUT\");\r\n        return this.http.put(this._verifyOTPUrl, payload, { headers: headers });\r\n    }\r\n\r\n    forgotPassword(payload:any) {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append(\"X-HTTP-Method\", \"PUT\");\r\n        return this.http.put(this._forgotPwdUrl, payload, { headers: headers });\r\n    }\r\n\r\n    changePassword(payload:any) {\r\n        let ibssApp: any = localStorage.getItem(\"ibssApp\");\r\n\r\n        if (ibssApp) {\r\n          ibssApp = JSON.parse(ibssApp);\r\n        }\r\n    \r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/json');\r\n        headers = headers.append('Content-Type', 'application/json');\r\n        headers = headers.append('Authorization', 'Bearer ' + ibssApp.token.access_token);\r\n        headers = headers.append(\"X-HTTP-Method\", \"PUT\");\r\n        return this.http.put(this._changePwdUrl, payload, { headers: headers });\r\n    }\r\n\r\n    logout() {\r\n        localStorage.clear();\r\n        setTimeout(()=> {\r\n            this.config.token = null;\r\n            this.config.user = null;\r\n            this.config.isLoggedin = false;\r\n            this.config.toggleLoader(false);\r\n          this.router.navigate(['/']);\r\n        },1000);\r\n      }\r\n}","export enum API {\r\n    LOGIN = 'LOGIN',\r\n    RESOURCES = 'RESOURCES'\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CONFIG } from 'src/app/config';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss']\n})\nexport class PageNotFoundComponent implements OnInit {\n  \n  config: typeof CONFIG = CONFIG;\n  constructor(\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    if (!this.config.isView && this.config.isLoggedin) {\n      this.router.navigate['/dashboard'];\n    }\n  }\n\n}\n","\n<div class=\"error-page jumbotron\">\n  <div class=\"error-content text-center\">\n    <h1 class=\"headline text-warning\"><i class=\"fas fa-exclamation-triangle text-warning\"></i> 404</h1>\n    <h3>Oops! Page not found.</h3>\n    <p>\n      We could not find the page you were looking for.\n      Meanwhile, you may <a href=\"/\">return to HOME</a>\n    </p>\n  </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ibss-faq',\n  templateUrl: './faq.component.html',\n  styleUrls: ['./faq.component.scss']\n})\nexport class FaqComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>faq works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ibss-terms',\n  templateUrl: './terms.component.html',\n  styleUrls: ['./terms.component.scss']\n})\nexport class TermsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>terms works!</p>\n","import { Injectable } from '@angular/core';\r\nimport { Resolve } from '@angular/router';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { CONFIG } from '../config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthResolver implements Resolve<Observable<boolean>> {\r\n    config: typeof CONFIG = CONFIG;\r\n\r\n  resolve(): Observable<any> {\r\n    let sessionVal: any = localStorage.getItem(\"ibssApp\");\r\n\r\n    if (sessionVal) {\r\n        sessionVal = JSON.parse(sessionVal);\r\n        localStorage.setItem(\"ibssApp\",JSON.stringify(sessionVal));\r\n        this.config.token = sessionVal.token;\r\n        this.config.user = sessionVal.res.serviceData;\r\n        this.config.login = sessionVal.login;\r\n        this.config.isLoggedin = true;\r\n        return of(true);\r\n    }\r\n    return of(false);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { CONFIG } from '../config';\r\nimport { AuthResolver } from './auth-resolve.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n    config: typeof CONFIG = CONFIG;\r\n    constructor(\r\n      public router: Router,\r\n      public authRes: AuthResolver\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n      return this.authRes.resolve();\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\r\nimport { FaqComponent } from './policies/faq/faq.component';\r\nimport { TermsComponent } from './policies/terms/terms.component';\r\nimport { AuthGuard } from './services/auth-guard.service';\r\nimport { AuthResolver } from './services/auth-resolve.service';\r\n\r\nconst routes: Routes = [\r\n  { path: '', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule), resolve:{ auth: AuthResolver}},\r\n  { path: 'main', loadChildren: () => import('./home/home.module').then(m => m.HomeModule), canActivate: [AuthGuard] }, //\r\n  { path: 'view/:Id', loadChildren: () => import('./view/view.module').then(m => m.ViewModule) },\r\n  { path: 'preview/:Id', loadChildren: () => import('./view/view.module').then(m => m.ViewModule), canActivate: [AuthGuard]},//, canActivate: [AuthGuard] \r\n  { path: 'templateview/:Id', loadChildren: () => import('./view/view.module').then(m => m.ViewModule), canActivate: [AuthGuard]},//, canActivate: [AuthGuard] \r\n  { path: 'terms', component: TermsComponent },\r\n  { path: 'faq', component: FaqComponent },\r\n  { path: '404', component: PageNotFoundComponent },\r\n  { path: '**', redirectTo: '' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes,  {onSameUrlNavigation: 'reload'})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","<router-outlet></router-outlet>\r\n<div class=\"preloader\" *ngIf='config?.showLoader === true'>\r\n    <div class=\"jumper\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n</div>","import { Component, ViewEncapsulation } from '@angular/core';\nimport { CONFIG } from './config';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title(title: any) {\n    throw new Error('Method not implemented.');\n  }\n  config: typeof CONFIG = CONFIG;\n}\n","import { Injectable } from '@angular/core';\r\nimport { CONFIG } from '../config';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthorisedSideNavService {\r\n    hideSideNav: boolean = false;\r\n    config: typeof CONFIG = CONFIG;\r\n    constructor() { }\r\n\r\n    toggleSideNav(): void {\r\n        this.hideSideNav = !this.hideSideNav;\r\n        this.config.isNavHidden = this.hideSideNav;\r\n    }\r\n}","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AuthGuard } from './services/auth-guard.service';\r\nimport { AuthService } from './services/auth.service';\r\nimport { AuthorisedSideNavService } from './services/authorised-side-nav';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\nimport { CarouselModule } from 'ngx-owl-carousel-o';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { AutofocusDirective } from './directives/autofocus.directive';\r\nimport { AuthResolver } from './services/auth-resolve.service';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    AutofocusDirective\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot(),\r\n    CarouselModule,\r\n    ColorPickerModule,\r\n    FormlyModule.forRoot({ extras: { lazyRender: true } }),\r\n    FormlyBootstrapModule    \r\n  ],\r\n  providers: [HttpClientModule, AuthService, AuthGuard, AuthorisedSideNavService, AuthResolver],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}