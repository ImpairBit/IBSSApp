{"version":3,"sources":["./node_modules/ng-otp-input/__ivy_ngcc__/fesm2015/ng-otp-input.js","./src/app/auth/login/login.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/signup/signup.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/auth.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.component.ts","./src/app/auth/auth.module.ts"],"names":["NgOtpInputComponent_div_0_input_1_Template","rf","ctx","_r5","$event","onKeyDown","i_r3","index","onKeyUp","item_r2","$implicit","ctx_r1","config","inputClass","componentKey","allowNumbersOnly","inputType","placeholder","inputStyles","otpForm","controls","NgOtpInputComponent_div_0_Template","ctx_r0","containerClass","containerStyles","KeysPipe","value","Object","keys","ɵfac","t","ɵpipe","name","type","pure","NgOtpInputComponent","keysPipe","this","length","onInputChange","inputControls","Array","Math","random","toString","substring","Date","getTime","addControl","getControlName","getInputType","disableAutoFocus","containerItem","document","getElementById","addEventListener","evt","handlePaste","ele","getElementsByClassName","focus","idx","event","ifKeyCode","key","targetCode","keyCode","charCode","inputIdx","nextInputId","appendKey","prevInputId","ifRightArrow","setSelected","ifLeftArrow","ifBackspaceOrDelete","target","rebuildValue","ifValidEntry","id","eleId","focusTo","setSelectionRange","setTimeout","inp","String","fromCharCode","test","navigator","userAgent","allowKeyCodes","includes","isNaN","reset","replace","from","forEach","c","get","setValue","indexOfElementToFocus","val","transform","k","emit","isPasswordInput","e","clipboardData","window","pastedData","getData","stopPropagation","preventDefault","ɵcmp","selectors","inputs","outputs","decls","vars","consts","template","directives","pipes","styles","NumberOnlyDirective","_elRef","_renderer","disabledNumberOnly","setAttribute","nativeElement","ɵdir","NgOtpInputModule","ɵmod","ɵinj","factory","providers","imports","LoginComponent","router","activatedRoute","authService","toastr","showLogin","toggleSection","login","email","password","showPassword","registeredEmail","canEnterOTP","canChangePassword","new","confirm","otp","showOtpComponent","otpInputConfig","pwdResetForm","required","checkEmail","resetInProcess","isLoggedin","navigate","generateOTP","subscribe","res","console","log","error","responseCode","businessValidation","i","errorDesc","dataValidation","payload","Number","toggleLoader","verfiyOTP","ngOtpInput","trim","forgotPassword","success","getToken","control","regEx","toLowerCase","isMatching","SignupComponent","currentStep","totalStep","stepPercent","separateDialCode","signupForm","firstName","max","middleName","lastName","mobile","pattern","checkPassword","confirmPassword","matchValues","agreeTerms","requiredTrue","isVisible","valueChanges","updateValueAndValidity","action","d","isValid","x","valid","signupData","sf","form","signup","resetForm","matchTo","parent","onSignup","onLogin","routes","path","component","AuthComponent","activeComp","section","onToggle","AuthRoutingModule","forChild","AuthModule"],"mappings":"mOAYA,SAASA,EAA2CC,EAAIC,GAAO,GAAS,EAALD,EAAQ,CACvE,MAAME,EAAM,kCACZ,8BAAsB,EAAG,QAAS,GAClC,0BAAkB,UAAW,SAA6EC,GAA6E,OAAnE,6BAAqBD,GAAqB,6BAAqB,GAAkBE,UAAUD,IAA/M,CAA2N,QAAS,SAA2EA,GAAU,6BAAqBD,GAAM,MAAMG,EAAOJ,EAAIK,MAA+C,OAAzB,6BAAqB,GAAkBC,QAAQJ,EAAQE,KAClb,8BACF,GAAS,EAALL,EAAQ,CACV,MAAMQ,EAAUP,EAAIQ,UACdJ,EAAOJ,EAAIK,MACXI,EAAS,6BAAqB,GACpC,sCAA8B,aAAcA,EAAOC,OAAOC,WAAY,IACtE,sCAA8B,KAAM,OAAQP,EAAM,IAAKK,EAAOG,aAAc,IAC5E,0BAAkB,UAAWH,EAAOC,OAAOG,iBAAmB,OAAS,GAAvE,CAA2E,OAAQJ,EAAOK,UAA1F,CAAqG,eAAiC,MAAjBL,EAAOC,OAAiB,KAAOD,EAAOC,OAAOK,cAAgB,GAAlL,CAAsL,sBAAuBN,EAAOC,OAAOG,iBAA3N,CAA6O,UAAWJ,EAAOC,OAAOM,YAAtQ,CAAmR,cAAeP,EAAOQ,QAAQC,SAASX,KAE9T,SAASY,EAAmCpB,EAAIC,GAK9C,GAL8D,EAALD,IACvD,8BAAsB,EAAG,MAAO,GAChC,0BAAkB,EAAGD,EAA4C,EAAG,GAAI,QAAS,GACjF,sBAAc,EAAG,QACjB,+BACO,EAALC,EAAQ,CACV,MAAMqB,EAAS,+BACf,sCAA8B,WAAYA,EAAOV,OAAOW,eAAgB,IACxE,sCAA8B,KAAM,KAAMD,EAAOR,aAAc,IAC/D,0BAAkB,UAAWQ,EAAOV,OAAOY,iBAC3C,yBAAiB,GACjB,0BAAkB,UAAW,2BAAmB,EAAG,EAAqB,MAAlBF,EAAOH,QAAkB,KAAOG,EAAOH,QAAQC,Y,kBAEnGK,EAKF,UAAUC,GACN,OAAOC,OAAOC,KAAKF,I,OAG3BD,EAASI,UAAO,SAA0BC,GAAK,OAAO,IAAKA,GAAKL,IAChEA,EAASM,WAAQ,4BAAoB,CAAEC,KAAM,OAAQC,KAAMR,EAAUS,MAAM,I,oBAyCrEC,EAIF,YAAYC,GACRC,KAAKD,SAAWA,EAChBC,KAAKzB,OAAS,CAAE0B,OAAQ,GAExBD,KAAKE,cAAgB,IAAI,eACzBF,KAAKG,cAAgB,IAAIC,MAAMJ,KAAKzB,OAAO0B,QAC3CD,KAAKvB,aAAe4B,KAAKC,SACpBC,SAAS,IACTC,UAAU,IAAK,IAAIC,MAAOC,UAAUH,SAAS,IAKtD,WACIP,KAAKlB,QAAU,IAAI,IAAU,IAC7B,IAAK,IAAIZ,EAAQ,EAAGA,EAAQ8B,KAAKzB,OAAO0B,OAAQ/B,IAC5C8B,KAAKlB,QAAQ6B,WAAWX,KAAKY,eAAe1C,GAAQ,IAAI,KAE5D8B,KAAKrB,UAAYqB,KAAKa,eAK1B,kBACI,IAAKb,KAAKzB,OAAOuC,iBAAkB,CAE/B,MAAMC,EAAgBC,SAASC,eAAe,KAAKjB,KAAKvB,cACxD,GAAIsC,EAAe,CACfA,EAAcG,iBAAiB,QAI9BC,GAAQnB,KAAKoB,YAAYD,IAE1B,MAAME,EAAMN,EAAcO,uBAAuB,aAAa,GAC1DD,GAAOA,EAAIE,OACXF,EAAIE,UAUpB,eAAeC,GACX,MAAO,QAAQA,EAMnB,YAAYC,GACR,OAAOzB,KAAK0B,UAAUD,EAAO,IAMjC,aAAaA,GACT,OAAOzB,KAAK0B,UAAUD,EAAO,IAMjC,oBAAoBA,GAChB,MAAsB,cAAdA,EAAME,KACI,WAAdF,EAAME,KACN3B,KAAK0B,UAAUD,EAAO,IACtBzB,KAAK0B,UAAUD,EAAO,IAO9B,UAAUA,EAAOG,GAIb,OAFYH,EAAMI,SAAWJ,EAAMK,WAErBF,EAMlB,UAAU7D,GAGN,GADciC,KAAK0B,UAAU3D,EAAQ,IAEjC,OAAO,EAQf,QAAQA,EAAQgE,GAEZ,MAAMC,EAAchC,KAAKiC,UAAU,QAAOF,EAAW,IAE/CG,EAAclC,KAAKiC,UAAU,QAAOF,EAAW,IACrD,GAAI/B,KAAKmC,aAAapE,GAClBiC,KAAKoC,YAAYJ,OADrB,CAIA,IAAIhC,KAAKqC,YAAYtE,GAMrB,OADoBiC,KAAKsC,oBAAoBvE,KACzBA,EAAOwE,OAAOlD,OAC9BW,KAAKoC,YAAYF,QACjBlC,KAAKwC,qBAGJzE,EAAOwE,OAAOlD,QAGfW,KAAKyC,aAAa1E,IAClBiC,KAAKoC,YAAYJ,GAErBhC,KAAKwC,iBAhBDxC,KAAKoC,YAAYF,IAsBzB,UAAUQ,GACN,MAAO,GAAGA,KAAM1C,KAAKvB,eAMzB,YAAYkE,GACR3C,KAAK4C,QAAQD,GAEb,MAAMtB,EAAML,SAASC,eAAe0B,GAChCtB,GAAOA,EAAIwB,mBACXC,WAAW,KAIPzB,EAAIwB,kBAAkB,EAAG,IACzB,GAOZ,aAAapB,GAET,MAAMsB,EAAMC,OAAOC,aAAaxB,EAAMI,SAGtC,MADiB,4BAA4BqB,KAAKC,UAAUC,YAExD,gBAAgBF,KAAKH,IACpB/C,KAAKzB,OAAO8E,eACTrD,KAAKzB,OAAO8E,cAAcC,SAAS7B,EAAMI,UAC5CJ,EAAMI,SAAW,IAAMJ,EAAMI,SAAW,IAMjD,QAAQc,GAEJ,MAAMtB,EAAML,SAASC,eAAe0B,GAChCtB,GACAA,EAAIE,QAQZ,SAASlC,GACL,IAAIW,KAAKzB,OAAOG,mBAAoB6E,MAAMlE,GAI1C,GADAW,KAAKlB,QAAQ0E,QACRnE,EAAL,CAeA,GAXAA,EAAQA,EAAMkB,WAAWkD,QAAQ,MAAO,IACxCrD,MAAMsD,KAAKrE,GAAOsE,QAAQ,CAKzBC,EAAGpC,KACIxB,KAAKlB,QAAQ+E,IAAI7D,KAAKY,eAAeY,KACrCxB,KAAKlB,QAAQ+E,IAAI7D,KAAKY,eAAeY,IAAMsC,SAASF,MAGvD5D,KAAKzB,OAAOuC,iBAAkB,CAE/B,MAAMC,EAAgBC,SAASC,eAAe,KAAKjB,KAAKvB,cAExD,IAAIsF,EAAwB1E,EAAMY,OAASD,KAAKzB,OAAO0B,OAASZ,EAAMY,OAAUD,KAAKzB,OAAO0B,OAAS,EAErG,IAAIoB,EAAMN,EAAcO,uBAAuB,aAAayC,GACxD1C,GAAOA,EAAIE,OACXF,EAAIE,QAGZvB,KAAKwC,oBAzBDxC,KAAKwC,eA8Bb,eAEI,IAAIwB,EAAM,GACVhE,KAAKD,SAASkE,UAAUjE,KAAKlB,QAAQC,UAAU4E,QAI/CO,IACQlE,KAAKlB,QAAQC,SAASmF,GAAG7E,QACzB2E,GAAOhE,KAAKlB,QAAQC,SAASmF,GAAG7E,SAGxCW,KAAKE,cAAciE,KAAKH,GAK5B,eACI,OAAOhE,KAAKzB,OAAO6F,gBACb,WACApE,KAAKzB,OAAOG,iBACR,MACA,OAMd,YAAY2F,GAGR,IAAIC,EAAgBD,EAAEC,eAAiBC,OAAsB,cAC7D,GAAID,EAEA,IAAIE,EAAaF,EAAcG,QAAQ,QAG3CJ,EAAEK,kBACFL,EAAEM,iBACGH,GAGLxE,KAAK8D,SAASU,I,OAGtB1E,EAAoBN,UAAO,SAAqCC,GAAK,OAAO,IAAKA,GAAKK,GAAqB,iCAAyB,KACpIA,EAAoB8E,UAAO,iCAAyB,CAAEhF,KAAME,EAAqB+E,UAAW,CAAC,CAAC,iBAAkBC,OAAQ,CAAEvG,OAAQ,UAAYwG,QAAS,CAAE7E,cAAe,iBAAmB8E,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,EAAG,QAAS,KAAM,UAAW,EAAG,QAAS,CAAC,EAAG,KAAM,WAAY,CAAC,aAAc,GAAI,YAAa,IAAK,eAAgB,MAAO,EAAG,UAAW,OAAQ,cAAe,qBAAsB,UAAW,QAAS,cAAe,KAAM,UAAW,QAAS,EAAG,QAAS,WAAY,CAAC,aAAc,GAAI,YAAa,IAAK,eAAgB,MAAO,EAAG,UAAW,OAAQ,cAAe,qBAAsB,UAAW,cAAe,KAAM,UAAW,UAAWC,SAAU,SAAsCvH,EAAIC,GAAgB,EAALD,GACvsB,0BAAkB,EAAGoB,EAAoC,EAAG,EAAG,MAAO,GAC/D,EAALpB,GACF,0BAAkB,OAAuB,MAAfC,EAAIiB,QAAkB,KAAOjB,EAAIiB,QAAQC,WAClEqG,WAAY,WAAc,MAAO,CAAC,OAAa,UAAgB,UAAgB,IAA6B,EAAqB,IAA2B,IAAyB,IAAwB,MAAiCC,MAAO,WAAc,MAAO,CAAC,IAAcC,OAAQ,CAAC,ub,oBA8CrSC,EAKF,YAAYC,EAAQC,GAChBzF,KAAKwF,OAASA,EACdxF,KAAKyF,UAAYA,EAKrB,WACSzF,KAAK0F,oBACN1F,KAAKyF,UAAUE,aAAa3F,KAAKwF,OAAOI,cAAe,aAAc,iF,OAIjFL,EAAoB/F,UAAO,SAAqCC,GAAK,OAAO,IAAKA,GAAK8F,GAAqB,iCAAyB,cAAoB,iCAAyB,eACjLA,EAAoBM,UAAO,iCAAyB,CAAEjG,KAAM2F,EAAqBV,UAAW,CAAC,CAAC,GAAI,aAAc,KAAMC,OAAQ,CAAEY,mBAAoB,wB,oBAoC9II,G,OAENA,EAAiBC,UAAO,gCAAwB,CAAEnG,KAAMkG,IACxDA,EAAiBE,UAAO,gCAAwB,CAAEC,QAAS,SAAkCxG,GAAK,OAAO,IAAKA,GAAKqG,IAAwBI,UAAW,CAAC,GAAWC,QAAS,CAAC,CAChK,eACA,IACA,Q,oKCldR,yCAEE,wCAAuB,iCAAK,8BAC5B,yCAAuB,wCAAY,8BACnC,uCAAoB,wFAA4D,8BAGhF,yCACE,2CAAsB,oCAAQ,8BAC9B,4CACE,4IADF,8BAEF,8BACA,0CACE,6CAAsB,qCAAQ,8BAC9B,2CACE,6CACW,+IADX,8BAEA,2CACE,8CACE,wKACA,oCAEF,8BACF,8BACF,8BACF,8BACA,wCAAK,8CAA8C,+HAAoB,kCAAK,8BAAS,kCACnF,yCAAgB,yCAA2C,mIAAwB,6CAAgB,8BAAI,8BACvG,yCAAgB,mDAAsB,yCAA2C,gIAAqB,oCAChG,8BAAI,8BACZ,8BAOF,8B,+CA3BM,gFAKO,oHAA+C,4BAKpC,iJ,kEAuBpB,0CACE,8CAAiE,kIAC/D,0CACE,4CAAwB,+DAAmC,8BAC3D,uCAEF,8BACA,iCACA,6CAEE,iIAAqB,mCAAO,8BAChC,8BACF,uC,gFAXwC,kFAGd,mFAKpB,sK,kEAQA,sDAA0B,8IACE,8B,gDAA1B,sD,yBACF,2CAAgC,yBAAqB,+B,6CAArB,0F,yBANtC,0CACE,0CACE,0CACE,4CAAwB,yBAAqC,8BAC7D,qDAEA,6CACF,8BACF,8BACF,wC,6CAN8B,yGACyC,iFAE1D,qE,yBApBf,0CACE,sDAaA,qDAUF,wC,6CAvBiB,6EAaA,6E,kEAWjB,0CACE,0CACE,4CAAwB,wCAAY,8BACpC,4CACE,8IADF,8BAEF,8BACA,0CACE,4CAAwB,4CAAgB,8BACxC,4CACE,kJADF,8BAEF,8BACA,yDACA,kCACA,8CACqF,yIAA6B,mCAAM,8BAC1H,uC,gDAXM,gFAKA,oFAEqB,iFAGvB,0I,kEAzCN,yCACE,wCAAuB,0CAAc,8BACrC,qDAyBA,sDAgBA,wCAAgB,wCAA2C,8HAAmB,0CAAc,8BAAI,8BAElG,8B,+CA3CiB,mFAyBA,mFC1Dd,Y,MAAMC,EAmCX,YACSC,EACAC,EACAC,EACAC,GAHA,KAAAH,SACA,KAAAC,iBACA,KAAAC,cACA,KAAAC,SArCT,KAAAC,WAAY,EACa,KAAAC,cAAgB,IAAI,eAC7C,KAAAC,MAAY,CACVC,MAAO,GACPC,SAAU,GACVC,cAAa,GAEf,KAAAC,gBAAyB,GACzB,KAAAC,aAAsB,EACtB,KAAAC,mBAA4B,EAC5B,KAAAJ,SAAe,CACbK,IAAK,GACLC,QAAS,IAEX,KAAAC,IAAc,GACd,KAAAC,kBAA2B,EAE3B,KAAAC,eAAqB,CACnB5I,kBAAkB,EAClBuB,OAAQ,EACRmE,iBAAiB,EACjBtD,kBAAkB,EAClBlC,YAAa,GACbC,YAAa,CACX,MAAS,OACT,OAAU,SAGd,KAAAN,OAAwB,IACxB,KAAAgJ,aAAmB,IAAI,IAAU,CAC/BX,MAAO,IAAI,IAAY,GAAI,CAAC,IAAWY,SAAUxH,KAAKyH,iBAExD,KAAAC,gBAAyB,EAOnB1H,KAAKzB,OAAOoJ,YACd3H,KAAKqG,OAAOuB,SAAS,CAAC,UAI1B,YAQA,cACE5H,KAAKyG,WAAY,EAGnB,SACEzG,KAAKyG,WAAY,EAEnB,WACEzG,KAAK0H,gBAAiB,EACtB1H,KAAK+G,gBAAkB/G,KAAKuH,aAAaxI,SAAgB,MAAEM,MAQ3DW,KAAKuG,YAAYsB,YAPD,CACd,YAAe,CACb,QAAW,EACX,YAAe,EACf,OAAU7H,KAAK+G,mBAIhBe,UAAWC,IAGV,GAFAC,QAAQC,IAAI,cAAeF,GAEvBA,EAAIG,OAAoC,IAA3BH,EAAIG,MAAMC,aACzBnI,KAAKgH,aAAc,OAEnB,GAAIe,EAAIG,MAAO,CACb,GAAIH,EAAIG,MAAME,mBAAmBnI,OAAS,EACxC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAME,mBAAmBnI,OAAQoI,IACvDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAME,mBAAmBC,GAAGC,WAItD,GAAIP,EAAIG,MAAMK,eAAetI,OAAS,EACpC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAMK,eAAetI,OAAQoI,IACnDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAMK,eAAeF,GAAGC,gBAGpB,GAArBP,EAAII,cACbnI,KAAKwG,OAAO0B,MAAM,oDAM5B,YAAYd,GAEV,GADApH,KAAKoH,IAAMA,EACPpH,KAAKoH,IAAInH,QAAUD,KAAKsH,eAAerH,OAAQ,CACjD,MAAMuI,EAAU,CACd,YAAe,CACb,QAAW,EACX,IAAOC,OAAOrB,GACd,OAAUpH,KAAK+G,kBAGnB/G,KAAKzB,OAAOmK,cAAa,GACzB1I,KAAKuG,YAAYoC,UAAUH,GACxBV,UAAWC,IAGV,GAFAC,QAAQC,IAAI,YAAaF,GAErBA,EAAIG,OAAoC,IAA3BH,EAAIG,MAAMC,aACzBnI,KAAKiH,mBAAoB,OAEzB,GAAIc,EAAIG,MAAO,CACb,GAAIH,EAAIG,MAAME,mBAAmBnI,OAAS,EACxC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAME,mBAAmBnI,OAAQoI,IACvDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAME,mBAAmBC,GAAGC,WAGtD,GAAIP,EAAIG,MAAMK,eAAetI,OAAS,EACpC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAMK,eAAetI,OAAQoI,IACnDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAMK,eAAeF,GAAGC,gBAGpB,GAArBP,EAAII,cACbnI,KAAKwG,OAAO0B,MAAM,wEAGtBlI,KAAKzB,OAAOmK,cAAa,MAKjC,OAAO1E,GACLhE,KAAK4I,WAAW9E,SAASE,GAG3B,mBAEE,GAAIhE,KAAK6G,SAASK,KAAOlH,KAAK6G,SAASK,IAAI2B,OAAO5I,OAAS,GAAKD,KAAK6G,SAASM,SAAWnH,KAAK6G,SAASM,QAAQ0B,OAAO5I,OAAS,EAC7H,GAAID,KAAK6G,SAASK,MAAQlH,KAAK6G,SAASM,QAAS,CAE/C,MAAMqB,EAAU,CACd,YAAe,CACb,IAAOxI,KAAKoH,IACZ,SAAYpH,KAAK6G,SAASK,IAC1B,OAAUlH,KAAK+G,kBAGnB/G,KAAKzB,OAAOmK,cAAa,GACzB1I,KAAKuG,YAAYuC,eAAeN,GAC7BV,UAAWC,IAGV,GAFAC,QAAQC,IAAI,iBAAkBF,GAE1BA,EAAIG,OAAoC,IAA3BH,EAAIG,MAAMC,aACzBnI,KAAKwG,OAAOuC,QAAQ,yDACpB/I,KAAKoH,IAAM,GACXpH,KAAK+G,gBAAkB,GACvB/G,KAAK6G,SAAW,CACdK,IAAK,GACLC,QAAS,IAEXnH,KAAKyG,WAAY,OAEjB,GAAIsB,EAAIG,MAAO,CACb,GAAIH,EAAIG,MAAME,mBAAmBnI,OAAS,EACxC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAME,mBAAmBnI,OAAQoI,IACvDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAME,mBAAmBC,GAAGC,WAItD,GAAIP,EAAIG,MAAMK,eAAetI,OAAS,EACpC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAMK,eAAetI,OAAQoI,IACnDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAMK,eAAeF,GAAGC,gBAGpB,GAArBP,EAAII,cACbnI,KAAKwG,OAAO0B,MAAM,2DAGtBlI,KAAKzB,OAAOmK,cAAa,UAG7B1I,KAAKwG,OAAO0B,MAAM,wCAGpBlI,KAAKwG,OAAO0B,MAAM,0DAItB,UACEF,QAAQC,IAAIjI,KAAKsG,gBACbtG,KAAK2G,MAAMC,OAAS5G,KAAK2G,MAAME,SAGjC7G,KAAKuG,YAAYyC,SAFAhJ,KAAK2G,MAAMC,MACX5G,KAAK2G,MAAME,UAG5B7G,KAAKwG,OAAO0B,MAAM,sDAItB,WAEElI,KAAK0G,cAAcvC,KAAK,UAG1B,aACE,OAAQ8E,GACGA,EAAQ5J,OACfW,KAAKzB,OAAO2K,MAAMtC,MAAM1D,KAAK+F,EAAQ5J,MAAM8J,eACzC,KACA,CAAEC,YAAY,I,6CArNXhD,GAAc,0J,mDAAdA,EAAc,mD,GAAA,K,iCAkBQ,G,+qDD7BnC,yCACE,yCACE,4CAwCA,2CA8CF,8BACF,+B,MAvFyC,0EAwCA,6E,ioCC/BlC,G,qCCMK,4CACsB,kDAAsB,+B,sBAQ5C,4CACsB,0DAA8B,+B,sBAQpD,4CACsB,iDAAqB,+B,sBAU3C,4CAAqG,sDAChF,iCAAM,qEAAyC,+B,sBAQpE,4CAAmG,2DACxE,+B,wBAkBzB,yD,2EAEE,sE,sBAGF,yCAAgD,gDAAoB,+B,sBACpE,yCAAgD,sJACmB,+B,yBAHrE,0CACE,8CAA4E,iCAC5E,8CAEF,+B,2EAHU,8FACA,+F,sBAuBV,4CACsB,kDAAsB,+B,4FC7FjD,Y,MAAMiD,EA4BX,YACShD,EACAE,EACAC,GAFA,KAAAH,SACA,KAAAE,cACA,KAAAC,SA7BgB,KAAAE,cAAgB,IAAI,eAE7C,KAAAnI,OAAwB,IACxB,KAAA+K,YAAc,EACd,KAAAC,UAAY,EACZ,KAAAC,YAAc,MAEd,KAAAC,kBAAmB,EACnB,KAAAC,WAAa,IAAI,IAAU,CACzBC,UAAW,IAAI,IAAY,GAAI,CAAC,IAAWnC,SAAU,IAAWoC,IAAI,MACpEC,WAAY,IAAI,IAAY,GAAI,CAAC,IAAWD,IAAI,MAChDE,SAAU,IAAI,IAAY,GAAI,CAAC,IAAWtC,SAAU,IAAWoC,IAAI,MACnEG,OAAQ,IAAI,IAAY,GAAI,CAAC,IAAWvC,SAAU,IAAWwC,QAAQ,mCACrEpD,MAAO,IAAI,IAAY,GAAI,CAAC,IAAWY,SAAUxH,KAAKyH,eACtDZ,SAAU,IAAI,IAAY,GAAI,CAAC,IAAWW,SAAUxH,KAAKiK,kBACzDC,gBAAiB,IAAI,IAAY,GAAI,CACnC,IAAW1C,SACXxH,KAAKmK,YAAY,cAEnBC,WAAY,IAAI,KAAY,EAAO,CAAC,IAAWC,iBAGjD,KAAAC,UAAY,CACVzD,UAAU,EACVqD,iBAAiB,GASnB,WACElK,KAAK0J,WAAW3K,SAAS8H,SAAS0D,aAAazC,UAAU,KACvD9H,KAAK0J,WAAW3K,SAASmL,gBAAgBM,2BAI7C,UACExK,KAAK0G,cAAcvC,KAAK,SAG1B,UAAUsG,GAEO,SAAXA,EACFzK,KAAKsJ,cAELtJ,KAAKsJ,cAGPtJ,KAAKwJ,YAAgBxJ,KAAKsJ,YAActJ,KAAKuJ,UAAa,IAAO,IAGnE,WAEE,IAAImB,EAAI1K,KAAK0J,WAAW3K,SAEpB4L,GAAU,EACd,IAAK,IAAIC,KAAKF,EACPA,EAAEE,GAAGC,QACRF,GAAU,GAId,GAAIA,EAAS,CACX,IAAIG,EAAa,CACf,YAAe,CACb,SAAY,GACZ,SAAY,GACZ,WAAc,GACd,aAAgB,UAChB,KAAQ,GACR,QAAW,GACX,UAAa,UACb,KAAQ,GACR,OAAU,GACV,MAAS,GACT,IAAO,GACP,SAAY,KACZ,MAAS,GACT,OAAU,EACV,SAAY,GACZ,OAAU,GACV,QAAW9K,KAAK0J,WAAW3K,SAAgB,MAAEM,MAC7C,YAAe,CACb,CACE,QAAWW,KAAK0J,WAAW3K,SAAgB,MAAEM,QAGjD,UAAaW,KAAK0J,WAAW3K,SAAoB,UAAEM,MACnD,WAAcW,KAAK0J,WAAW3K,SAAqB,WAAEM,MACrD,SAAYW,KAAK0J,WAAW3K,SAAmB,SAAEM,MACjD,OAAUW,KAAK0J,WAAW3K,SAAiB,OAAEM,MAC7C,UAAa,CACX,SAAYW,KAAK0J,WAAW3K,SAAmB,SAAEM,SAIvD2I,QAAQC,IAAI,aAAc6C,GAC1B9C,QAAQC,IAAI,aAAcyC,EAAG1K,KAAK+K,IAClC/C,QAAQC,IAAI,aAAcyC,EAAG1K,KAAK+K,GAAGF,MAAO7K,KAAK+K,GAAGC,KAAKH,OAEzD7K,KAAKuG,YAAY0E,OAAOH,GACrBhD,UAAWC,IAGV,GAFAC,QAAQC,IAAI,iBAAkBF,GAE1BA,EAAIG,OAAmC,GAA1BH,EAAIG,MAAMC,aACzBnI,KAAKkL,YACLlL,KAAKwG,OAAOuC,QAAQ,yDAEpB,GAAIhB,EAAIG,MAAO,CACb,GAAIH,EAAIG,MAAME,mBAAmBnI,OAAS,EACxC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAME,mBAAmBnI,OAAQoI,IACvDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAME,mBAAmBC,GAAGC,WAItD,GAAIP,EAAIG,MAAMK,eAAetI,OAAS,EACpC,IAAK,IAAIoI,EAAI,EAAGA,EAAIN,EAAIG,MAAMK,eAAetI,OAAQoI,IACnDrI,KAAKwG,OAAO0B,MAAMH,EAAIG,MAAMK,eAAeF,GAAGC,gBAGpB,GAArBP,EAAII,cACbnI,KAAKwG,OAAO0B,MAAM,mDAIpBA,IACFF,QAAQC,IAAI,iBAAkBC,GAC9BlI,KAAKwG,OAAO0B,MAAM,qDAO1B,YACElI,KAAK0J,WAAWlG,QAChBxD,KAAKsK,UAAY,CACfzD,UAAU,EACVqD,iBAAiB,GAIrB,YACEiB,GAEA,OAAQlC,GACGA,EAAQmC,QACbnC,EAAQmC,OAAO/L,OACjB4J,EAAQ5J,QAAU4J,EAAQmC,OAAOrM,SAASoM,GAAS9L,MACjD,KACA,CAAE+J,YAAY,GAItB,aACE,OAAQH,GACGA,EAAQ5J,OACfW,KAAKzB,OAAO2K,MAAMtC,MAAM1D,KAAK+F,EAAQ5J,MAAM8J,eACzC,KACA,CAAEC,YAAY,GAItB,gBACE,OAAQH,GACGA,EAAQ5J,OACfW,KAAKzB,OAAO2K,MAAMrC,SAAS3D,KAAK+F,EAAQ5J,OACtC,KACA,CAAE+J,YAAY,I,6CA7KXC,GAAe,oH,mDAAfA,EAAe,oD,GAAA,K,krEDX5B,yCACE,yCACE,yCAEE,wCAAuB,oCAAQ,8BAC/B,yCAAuB,oDAAwB,8BAC/C,uCAAoB,gIACV,8BAEV,4CAA4D,qDAAU,EAAAgC,aACpE,0CACE,0CACE,2CACE,6CAA4B,wCAAW,4CAA0B,8BAAC,8BAAO,8BACzE,wCAEF,8BACA,+CAEF,8BACA,0CACE,2CACE,6CAA6B,yCAAY,8BACzC,wCAEF,8BACA,+CAEF,8BACA,0CACE,2CACE,6CAA2B,uCAAU,4CAA0B,8BAAC,8BAAO,8BACvE,wCAEF,8BACA,+CAEF,8BACF,8BACA,0CACE,2CACE,2CACE,6CAAyB,oCAAO,4CAA0B,8BAAC,8BAAO,8BAClE,wCAEF,8BACA,+CAEF,8BACA,2CACE,2CACE,6CAAwB,mCAAM,4CAA0B,8BAAC,8BAAO,8BAChE,wCAEF,8BACA,+CAEF,8BACF,8BACA,0CACE,2CACE,2CACE,6CAA2B,sCAAS,4CAA0B,8BAAC,8BAAO,8BACtE,2CACE,wCAEA,2CACE,8CACE,iGACA,oCAEF,8BACF,8BACF,8BACA,iEAGF,8BACA,6CAKF,8BACA,2CACE,2CACE,6CAA2B,8CAAiB,4CAA0B,8BAAC,8BAAO,8BAG9E,2CACE,wCAGA,2CACE,8CACE,+GACA,oCAGF,8BACF,8BACF,8BACF,8BACA,+CAEF,8BACF,8BACA,0CASE,2CACE,2CACE,wCAEA,6CACE,iDAAmB,yCAA2E,kDAAoB,8BACpH,8BACF,8BACF,8BACF,8BACA,0CACE,2CAAuB,8CAA4F,+CAAkB,8BAAS,kCAC5I,yCAAgB,sDAAyB,yCAA0C,oDAAS,EAAAC,YAAW,mCACjG,8BAAI,8BACZ,8BACF,8BAMF,8BACF,8BAGF,8BACF,+B,4CArIyC,gFAQrB,mIASA,oIASA,gIAWA,4HASA,0HASG,wHAKW,iJAMjB,sIAGC,+FAYK,+HAOD,+JAMF,8IAkB6C,yGAMgC,kF,uoCCpH1F,G,kECED,iDAAyC,0IAAmC,+B,kEAC5E,kDAA2C,0IAAmC,+B,sCCX9EC,EAAiB,CACrB,CAAEC,KAAM,GAAIC,UCEP,M,MAAMC,EAGX,cADA,KAAAC,WAAa,QAEb,YAGA,SAASC,GACP5L,KAAK2L,WAAY,GACjB7I,WAAW,KACT9C,KAAK2L,WAAaC,K,6CAVXF,I,mDAAAA,EAAa,qXFP1B,yCACE,yCACE,yCACE,yCACE,oCACF,8BACA,yCACA,yCACE,4CAA0E,oDAAS,EAAAG,SAAS,WAAU,iCAAK,8BAC3G,4CAA2E,oDAAS,EAAAA,SAAS,YAAW,mCAAM,8BAChH,8BACA,8BACF,8BACA,0CACE,mDACA,oDACF,8BACF,8BACF,+B,MAVqC,4HACA,6HAKlB,qFACC,wF,ovHERb,KDKA,Y,MAAMC,G,yDAAAA,I,+EAAAA,IAAiB,SAHnB,CAAC,IAAaC,SAASR,IACtB,O,GAEL,GEgBA,Q,MAAMS,G,yDAAAA,I,+EAAAA,IAAU,SAVZ,CACP,eACA,EACA,IACA,IACA,EACA,Q,GAIG","file":"auth-auth-module.js","sourcesContent":["import { Pipe, EventEmitter, Component, Input, Output, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onKeyDown($event); })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const i_r3 = ctx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onKeyUp($event, i_r3); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"disabledNumberOnly\", !ctx_r1.config.allowNumbersOnly)(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n} }\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, \"input\", 2);\n    ɵngcc0.ɵɵpipe(2, \"keys\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"wrapper \", ctx_r0.config.containerClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n} }\nclass KeysPipe {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\nKeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };\nKeysPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"keys\", type: KeysPipe, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KeysPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'keys'\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Config {\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Config.prototype.inputStyles;\r\n    /** @type {?} */\r\n    Config.prototype.containerStyles;\r\n    /** @type {?} */\r\n    Config.prototype.allowKeyCodes;\r\n    /** @type {?} */\r\n    Config.prototype.length;\r\n    /** @type {?} */\r\n    Config.prototype.allowNumbersOnly;\r\n    /** @type {?} */\r\n    Config.prototype.inputClass;\r\n    /** @type {?} */\r\n    Config.prototype.containerClass;\r\n    /** @type {?} */\r\n    Config.prototype.isPasswordInput;\r\n    /** @type {?} */\r\n    Config.prototype.disableAutoFocus;\r\n    /** @type {?} */\r\n    Config.prototype.placeholder;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgOtpInputComponent {\r\n    /**\r\n     * @param {?} keysPipe\r\n     */\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.inputType = this.getInputType();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            /** @type {?} */\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                containerItem.addEventListener('paste', (/**\r\n                 * @param {?} evt\r\n                 * @return {?}\r\n                 */\r\n                (evt) => this.handlePaste(evt)));\r\n                /** @type {?} */\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} idx\r\n     * @return {?}\r\n     */\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    ifLeftArrow(event) {\r\n        return this.ifKeyCode(event, 37);\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    ifRightArrow(event) {\r\n        return this.ifKeyCode(event, 39);\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    ifBackspaceOrDelete(event) {\r\n        return (event.key === 'Backspace' ||\r\n            event.key === 'Delete' ||\r\n            this.ifKeyCode(event, 8) ||\r\n            this.ifKeyCode(event, 46));\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @param {?} targetCode\r\n     * @return {?}\r\n     */\r\n    ifKeyCode(event, targetCode) {\r\n        /** @type {?} */\r\n        const key = event.keyCode || event.charCode;\r\n        // tslint:disable-next-line: triple-equals\r\n        return key == targetCode ? true : false;\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    onKeyDown($event) {\r\n        /** @type {?} */\r\n        var isSpace = this.ifKeyCode($event, 32);\r\n        if (isSpace) { // prevent space\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @param {?} inputIdx\r\n     * @return {?}\r\n     */\r\n    onKeyUp($event, inputIdx) {\r\n        /** @type {?} */\r\n        const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n        /** @type {?} */\r\n        const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n        if (this.ifRightArrow($event)) {\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (this.ifLeftArrow($event)) {\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const isBackspace = this.ifBackspaceOrDelete($event);\r\n        if (isBackspace && !$event.target.value) {\r\n            this.setSelected(prevInputId);\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidEntry($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    appendKey(id) {\r\n        return `${id}_${this.componentKey}`;\r\n    }\r\n    /**\r\n     * @param {?} eleId\r\n     * @return {?}\r\n     */\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        /** @type {?} */\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                ele.setSelectionRange(0, 1);\r\n            }), 0);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    ifValidEntry(event) {\r\n        /** @type {?} */\r\n        const inp = String.fromCharCode(event.keyCode);\r\n        /** @type {?} */\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp) ||\r\n            (this.config.allowKeyCodes &&\r\n                this.config.allowKeyCodes.includes(event.keyCode)) ||\r\n            (event.keyCode >= 96 && event.keyCode <= 105));\r\n    }\r\n    /**\r\n     * @param {?} eleId\r\n     * @return {?}\r\n     */\r\n    focusTo(eleId) {\r\n        /** @type {?} */\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((/**\r\n         * @param {?} c\r\n         * @param {?} idx\r\n         * @return {?}\r\n         */\r\n        (c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        }));\r\n        if (!this.config.disableAutoFocus) {\r\n            /** @type {?} */\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            /** @type {?} */\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            /** @type {?} */\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    rebuildValue() {\r\n        /** @type {?} */\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach((/**\r\n         * @param {?} k\r\n         * @return {?}\r\n         */\r\n        k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                val += this.otpForm.controls[k].value;\r\n            }\r\n        }));\r\n        this.onInputChange.emit(val);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getInputType() {\r\n        return this.config.isPasswordInput\r\n            ? 'password'\r\n            : this.config.allowNumbersOnly\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        /** @type {?} */\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            /** @type {?} */\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) { return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };\nNgOtpInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgOtpInputComponent, selectors: [[\"ng-otp-input\"]], inputs: { config: \"config\" }, outputs: { onInputChange: \"onInputChange\" }, decls: 1, vars: 1, consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"numberOnly\", \"\", \"maxlength\", \"1\", \"autocomplete\", \"off\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"keydown\", \"keyup\", 4, \"ngFor\", \"ngForOf\"], [\"numberOnly\", \"\", \"maxlength\", \"1\", \"autocomplete\", \"off\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"formControl\", \"id\", \"keydown\", \"keyup\"]], template: function NgOtpInputComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, NumberOnlyDirective, ɵngcc2.MaxLengthValidator, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective]; }, pipes: function () { return [KeysPipe]; }, styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width:420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"] });\r\n/** @nocollapse */\r\nNgOtpInputComponent.ctorParameters = () => [\r\n    { type: KeysPipe }\r\n];\r\nNgOtpInputComponent.propDecorators = {\r\n    config: [{ type: Input }],\r\n    onInputChange: [{ type: Output }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOtpInputComponent, [{\n        type: Component,\n        args: [{\n                // tslint:disable-next-line: component-selector\n                selector: 'ng-otp-input',\n                template: \"<div class=\\\"wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\" numberOnly [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [disabledNumberOnly]=\\\"!config.allowNumbersOnly\\\" [ngStyle]=\\\"config.inputStyles\\\" maxlength=\\\"1\\\"\\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"off\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" id=\\\"otp_{{i}}_{{componentKey}}\\\" (keydown)=\\\"onKeyDown($event)\\\"\\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\">\\r\\n</div>\",\n                styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:32px}.wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width:420px){.otp-input{width:30px;font-size:18px;height:30px}}\"]\n            }]\n    }], function () { return [{ type: KeysPipe }]; }, { config: [{\n            type: Input\n        }], onInputChange: [{\n            type: Output\n        }] }); })();\r\nif (false) {\r\n    /** @type {?} */\r\n    NgOtpInputComponent.prototype.config;\r\n    /** @type {?} */\r\n    NgOtpInputComponent.prototype.onInputChange;\r\n    /** @type {?} */\r\n    NgOtpInputComponent.prototype.otpForm;\r\n    /** @type {?} */\r\n    NgOtpInputComponent.prototype.inputControls;\r\n    /** @type {?} */\r\n    NgOtpInputComponent.prototype.componentKey;\r\n    /** @type {?} */\r\n    NgOtpInputComponent.prototype.inputType;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgOtpInputComponent.prototype.keysPipe;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NumberOnlyDirective {\r\n    /**\r\n     * @param {?} _elRef\r\n     * @param {?} _renderer\r\n     */\r\n    constructor(_elRef, _renderer) {\r\n        this._elRef = _elRef;\r\n        this._renderer = _renderer;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (!this.disabledNumberOnly) {\r\n            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\r\n        }\r\n    }\r\n}\nNumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) { return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nNumberOnlyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumberOnlyDirective, selectors: [[\"\", \"numberOnly\", \"\"]], inputs: { disabledNumberOnly: \"disabledNumberOnly\" } });\r\n/** @nocollapse */\r\nNumberOnlyDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\nNumberOnlyDirective.propDecorators = {\r\n    disabledNumberOnly: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberOnlyDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[numberOnly]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /** @type {?} */\r\n    NumberOnlyDirective.prototype.disabledNumberOnly;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NumberOnlyDirective.prototype._elRef;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NumberOnlyDirective.prototype._renderer;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgOtpInputModule {\r\n}\nNgOtpInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOtpInputModule });\nNgOtpInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOtpInputModule_Factory(t) { return new (t || NgOtpInputModule)(); }, providers: [KeysPipe], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, { declarations: function () { return [NgOtpInputComponent, KeysPipe, NumberOnlyDirective]; }, imports: function () { return [CommonModule,\n        FormsModule,\n        ReactiveFormsModule]; }, exports: function () { return [NgOtpInputComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOtpInputModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    ReactiveFormsModule\n                ],\n                declarations: [NgOtpInputComponent, KeysPipe, NumberOnlyDirective],\n                exports: [NgOtpInputComponent],\n                providers: [KeysPipe]\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgOtpInputModule, NgOtpInputComponent as ɵa, KeysPipe as ɵb, NumberOnlyDirective as ɵc };\n\n//# sourceMappingURL=ng-otp-input.js.map","<!-- <button type=\"button\" class=\"btn btn-primary\" (click)=\"onLogin()\">Login</button> -->\r\n<div class=\"container\">\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-lg-6 login-section\" *ngIf=\"showLogin\">\r\n      <!-- Content -->\r\n      <h1 class=\"auth-title\">Login</h1>\r\n      <div class=\"sub-title\">Welcome Back</div>\r\n      <p class=\"sub-text\">Create a new account if you currently don't have the account</p>\r\n\r\n      <!-- <form> -->\r\n      <div class=\"form-group\">\r\n        <label for=\"email-id\">email-id</label>\r\n        <input type=\"email\" class=\"form-control\" id=\"email-id\" placeholder=\"Enter your email id\" required autofocus\r\n          [(ngModel)]=\"login.email\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"Password\">Password</label>\r\n        <div class=\"input-group mb-3\">\r\n          <input [type]=\"!login?.showPassword?'password':'text'\" id=\"Password\" class=\"form-control\" placeholder=\"Password\"\r\n            required [(ngModel)]=\"login.password\">\r\n          <div class=\"input-group-append\" id=\"button-addon3\">\r\n            <button class=\"btn btn-outline-primary border\" type=\"button\"\r\n              (click)=\"login.showPassword = !login.showPassword\">\r\n              <i class=\"fa\" [ngClass]=\"{'fa-eye':!login.showPassword, 'fa-eye-slash':login.showPassword}\"\r\n                aria-hidden=\"true\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div><button type=\"button\" class=\"btn btn-primary\" (click)=\"onLogin()\">Login</button><br>\r\n        <p class=\"mt-2\"><a class=\"link\" href=\"javascript:void(0);\" (click)=\"onForgotPwd()\">Forgot Password?</a></p>\r\n        <p class=\"mt-2\">Dont have an account? <a class=\"link\" href=\"javascript:void(0);\" (click)=\"onSignup()\">Sign\r\n            Up</a></p>\r\n      </div>\r\n      <!-- <div class=\"signup-brands\">\r\n          <a class=\"img-link\" href=\"\"><img src=\"../../../assets/apple-icon.svg\"></a>\r\n          <a class=\"img-link\" href=\"\"><img src=\"../../../assets/fb-icon.svg\"></a>\r\n          <a class=\"img-link\" href=\"\"><img src=\"../../../assets/google-icon.svg\"></a>\r\n        </div> -->\r\n      <!-- </form> -->\r\n    </div>\r\n\r\n    <!-- col- elements here -->\r\n    <div class=\"col-lg-6 login-section\" *ngIf=\"!showLogin\">\r\n      <h1 class=\"auth-title\">Reset Password</h1>\r\n      <ng-container *ngIf=\"!canChangePassword\">\r\n        <ng-container *ngIf=\"!canEnterOTP\">\r\n          <form #prf=\"ngForm\" id=\"pwdResetForm\" [formGroup]=\"pwdResetForm\" (submit)=\"onGetOPT()\">\r\n            <div class=\"form-label-group\">\r\n              <label for=\"inputEmail\">Enter your registered Email address</label>\r\n              <input type=\"email\" [disabled]=\"resetInProcess\" id=\"inputEmail\" class=\"form-control\"\r\n                placeholder=\"Email address\" required autofocus formControlName=\"email\">\r\n            </div>\r\n            <br />\r\n            <button class=\"btn btn-primary text-uppercase\" type=\"submit\" form=\"signupForm\"\r\n              [disabled]=\"resetInProcess || (prf.form.controls.email.touched && !prf.form.controls.email.valid) || config.showLoader\"\r\n              (click)=\"onGetOPT()\">Get OTP</button>\r\n          </form>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"canEnterOTP\">\r\n          <div class=\"row\">\r\n            <div class=\"col-12\">\r\n              <label for=\"inputEmail\">Enter OTP sent to {{registeredEmail}}</label>\r\n              <ng-otp-input #ngOtpInput (onInputChange)=\"onOtpChange($event)\" *ngIf=\"showOtpComponent\"\r\n                [config]=\"otpInputConfig\"></ng-otp-input>\r\n              <span *ngIf=\"otp\" class=\"o-t-p\">Entered otp :-{{otp}}</span>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"canChangePassword\">\r\n        <div class=\"form-label-group\">\r\n          <label for=\"inputEmail\">New Password</label>\r\n          <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"Email address\" required autofocus\r\n            [(ngModel)]=\"password.new\">\r\n        </div>\r\n        <div class=\"form-label-group\">\r\n          <label for=\"inputEmail\">Confirm Password</label>\r\n          <input type=\"password\" id=\"inputEmail\" class=\"form-control\" placeholder=\"Email address\" required autofocus\r\n            [(ngModel)]=\"password.confirm\">\r\n        </div>\r\n        <password-strength-meter [password]=\"password.new\"></password-strength-meter>\r\n        <br />\r\n        <button class=\"btn btn-primary text-uppercase\" type=\"submit\"\r\n          [disabled]=\"!registeredEmail || registeredEmail.trim() === ''|| config.showLoader\" (click)=\"onChangePassword()\">Change</button>\r\n      </ng-container>\r\n      <p class=\"mt-2\"><a class=\"link\" href=\"javascript:void(0);\" (click)=\"goBack()\">Back to Login?</a></p>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Output, ViewChild, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { CONFIG } from 'src/app/config';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\ndeclare var $:any;\r\n@Component({\r\n  selector: 'ibss-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  showLogin = true;\r\n  @Output('toggleSection') toggleSection = new EventEmitter();\r\n  login:any = {\r\n    email: \"\",\r\n    password: \"\",\r\n    showPassword:false\r\n  }\r\n  registeredEmail:string = \"\";\r\n  canEnterOTP:boolean = false;\r\n  canChangePassword:boolean = false;\r\n  password:any = {\r\n    new: \"\",\r\n    confirm: \"\",\r\n  }\r\n  otp: string = \"\";\r\n  showOtpComponent:boolean = true;\r\n  @ViewChild('ngOtpInput', { read: false }) ngOtpInput: any;\r\n  otpInputConfig:any = {\r\n    allowNumbersOnly: false,\r\n    length: 6,\r\n    isPasswordInput: false,\r\n    disableAutoFocus: false,\r\n    placeholder: '',\r\n    inputStyles: {\r\n      'width': '50px',\r\n      'height': '50px'\r\n    }\r\n  };\r\n  config: typeof CONFIG = CONFIG;\r\n  pwdResetForm:any = new FormGroup({\r\n    email: new FormControl(\"\", [Validators.required, this.checkEmail()]),\r\n  });\r\n  resetInProcess:boolean = false;\r\n  constructor(\r\n    public router: Router,\r\n    public activatedRoute: ActivatedRoute,\r\n    public authService: AuthService,\r\n    public toastr: ToastrService\r\n  ) {\r\n    if (this.config.isLoggedin) {\r\n      this.router.navigate(['/main']);\r\n    }\r\n   }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  // onLogin(){\r\n  //   this.router.navigate(['/dashboard']);\r\n  // }\r\n\r\n  onForgotPwd() {\r\n    this.showLogin = false;\r\n  }\r\n\r\n  goBack() {\r\n    this.showLogin = true;\r\n  }\r\n  onGetOPT() {\r\n    this.resetInProcess = true;\r\n    this.registeredEmail = this.pwdResetForm.controls['email'].value;\r\n    const payload = {\r\n      \"serviceData\": {\r\n        \"otpType\": 1,\r\n        \"requestType\": 2,\r\n        \"sendTo\": this.registeredEmail \r\n      }\r\n    }\r\n    this.authService.generateOTP(payload)\r\n      .subscribe((res: any) => {\r\n        console.log(\"generateOTP\", res);\r\n\r\n        if (res.error && res.error.responseCode === 0) {\r\n          this.canEnterOTP = true;\r\n        } else {\r\n          if (res.error) {\r\n            if (res.error.businessValidation.length > 0) {\r\n              for (let i = 0; i < res.error.businessValidation.length; i++) {\r\n                this.toastr.error(res.error.businessValidation[i].errorDesc);\r\n              }\r\n            }\r\n\r\n            if (res.error.dataValidation.length > 0) {\r\n              for (let i = 0; i < res.error.dataValidation.length; i++) {\r\n                this.toastr.error(res.error.dataValidation[i].errorDesc);\r\n              }\r\n            }\r\n          } else if (res.responseCode == -1) {\r\n            this.toastr.error(\"Sigup Failed, Please try again after sometimes\");\r\n          }\r\n        }\r\n      })\r\n  }\r\n\r\n  onOtpChange(otp:any) {\r\n    this.otp = otp;\r\n    if (this.otp.length == this.otpInputConfig.length) {\r\n      const payload = {\r\n        \"serviceData\": {\r\n          \"otpType\": 1,\r\n          \"otp\": Number(otp),\r\n          \"sendTo\": this.registeredEmail \r\n        }\r\n      }\r\n      this.config.toggleLoader(true);\r\n      this.authService.verfiyOTP(payload)\r\n        .subscribe((res: any) => {\r\n          console.log(\"verfiyOTP\", res);\r\n          \r\n          if (res.error && res.error.responseCode === 0) {\r\n            this.canChangePassword = true;\r\n          } else {\r\n            if (res.error) {\r\n              if (res.error.businessValidation.length > 0) {\r\n                for (let i = 0; i < res.error.businessValidation.length; i++) {\r\n                  this.toastr.error(res.error.businessValidation[i].errorDesc);\r\n                }\r\n              }\r\n              if (res.error.dataValidation.length > 0) {\r\n                for (let i = 0; i < res.error.dataValidation.length; i++) {\r\n                  this.toastr.error(res.error.dataValidation[i].errorDesc);\r\n                }\r\n              }\r\n            } else if (res.responseCode == -1) {\r\n              this.toastr.error(\"!!!Oops there seems to be an issue, Please try again after sometimes\");\r\n            }\r\n          }\r\n          this.config.toggleLoader(false);\r\n        });\r\n    }\r\n  }\r\n\r\n  setVal(val:any) {\r\n    this.ngOtpInput.setValue(val);\r\n  }\r\n\r\n  onChangePassword() {\r\n\r\n    if (this.password.new && this.password.new.trim().length > 0 && this.password.confirm && this.password.confirm.trim().length > 0 ) {\r\n      if (this.password.new === this.password.confirm) {\r\n\r\n        const payload = {\r\n          \"serviceData\": {\r\n            \"otp\": this.otp,\r\n            \"password\": this.password.new ,\r\n            \"userId\": this.registeredEmail \r\n          }\r\n        }\r\n        this.config.toggleLoader(true);\r\n        this.authService.forgotPassword(payload)\r\n          .subscribe((res: any) => {\r\n            console.log(\"forgotPassword\", res);\r\n    \r\n            if (res.error && res.error.responseCode === 0) {\r\n              this.toastr.success(\"Password reset successfull!!. Please login to proceed\");\r\n              this.otp = \"\";\r\n              this.registeredEmail = \"\";\r\n              this.password = {\r\n                new: \"\",\r\n                confirm: \"\",\r\n              };\r\n              this.showLogin = true;\r\n            } else {\r\n              if (res.error) {\r\n                if (res.error.businessValidation.length > 0) {\r\n                  for (let i = 0; i < res.error.businessValidation.length; i++) {\r\n                    this.toastr.error(res.error.businessValidation[i].errorDesc);\r\n                  }\r\n                }\r\n    \r\n                if (res.error.dataValidation.length > 0) {\r\n                  for (let i = 0; i < res.error.dataValidation.length; i++) {\r\n                    this.toastr.error(res.error.dataValidation[i].errorDesc);\r\n                  }\r\n                }\r\n              } else if (res.responseCode == -1) {\r\n                this.toastr.error(\"Password reset Failed, Please try again after sometimes\");\r\n              }\r\n            }\r\n            this.config.toggleLoader(false);\r\n          });\r\n      } else { \r\n        this.toastr.error(\"Confirm password doesn't match.\");\r\n      }\r\n    } else {\r\n      this.toastr.error(\"Please enter Password and Confirm Password to procced.\");\r\n    }\r\n  }\r\n\r\n  onLogin() {\r\n    console.log(this.activatedRoute);\r\n    if (this.login.email && this.login.password ) {\r\n      const username = this.login.email;//\"abc@gmail.com\";\r\n      const password = this.login.password;//\"Thameem@123\";\r\n      this.authService.getToken(username, password);\r\n    } else {\r\n      this.toastr.error(\"Please provide valid email and password to proceed\");\r\n    }\r\n  }\r\n\r\n  onSignup() {\r\n    // this.router.navigate(['/signup']);\r\n    this.toggleSection.emit('signup');\r\n  }\r\n\r\n  checkEmail(): (AbstractContro:any) => ValidationErrors | null {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return !!control.value &&\r\n        this.config.regEx.email.test(control.value.toLowerCase())\r\n        ? null\r\n        : { isMatching: false };\r\n    };\r\n  }\r\n\r\n}\r\n","<!-- <p>signup works!</p> -->\r\n<div class=\"container\">\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-lg-10 login-section\">\r\n      <!-- Content -->\r\n      <h1 class=\"auth-title\">Register</h1>\r\n      <div class=\"sub-title\">Create your account here</div>\r\n      <p class=\"sub-text\">Let’s get you set up so you can verify your personal account and begin setting up your\r\n        profile.</p>\r\n\r\n      <form #sf=\"ngForm\" id=\"signupForm\" [formGroup]=\"signupForm\" (submit)=\"onSignup()\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label for=\"inputFirstName\">First Name <span class=\"text-danger\">*</span></label>\r\n              <input type=\"email\" id=\"inputFirstName\" name=\"firstName\" formControlName=\"firstName\" class=\"form-control\"\r\n                placeholder=\"First Name\">\r\n            </div>\r\n            <small *ngIf=\"sf.form.controls.firstName.touched && !sf.form.controls.firstName.valid\"\r\n              class=\"text-danger\">First name is required</small>\r\n          </div>\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label for=\"inputMiddleName\">Middle Name </label>\r\n              <input type=\"email\" id=\"inputMiddleName\" name=\"middleName\" formControlName=\"middleName\"\r\n                class=\"form-control\" placeholder=\"Middle Name\">\r\n            </div>\r\n            <small *ngIf=\"sf.form.controls.middleName.touched && !sf.form.controls.middleName.valid\"\r\n              class=\"text-danger\">Please fill in the Middle name</small>\r\n          </div>\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label for=\"inputLastName\">Last Name <span class=\"text-danger\">*</span></label>\r\n              <input type=\"email\" id=\"inputLastName\" name=\"lastName\" formControlName=\"lastName\" class=\"form-control\"\r\n                placeholder=\"Last Name\">\r\n            </div>\r\n            <small *ngIf=\"sf.form.controls.lastName.touched && !sf.form.controls.lastName.valid\"\r\n              class=\"text-danger\">Last name is required</small>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <div class=\"form-group\">\r\n              <label for=\"inputMobile\">Mobile <span class=\"text-danger\">*</span></label>\r\n              <input type=\"phone\" id=\"inputMobile\" name=\"mobile\" formControlName=\"mobile\" class=\"form-control\"\r\n                placeholder=\"Mobile\">\r\n            </div>\r\n            <small *ngIf=\"sf.form.controls.mobile.touched && !sf.form.controls.mobile.valid\" class=\"text-danger\">Mobile\r\n              number is required.<br />format:code-mobileno ( eg.+XXX-XXXXXXXXX)</small>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <div class=\"form-group\">\r\n              <label for=\"inputEmail\">Email <span class=\"text-danger\">*</span></label>\r\n              <input type=\"email\" id=\"inputEmail\" name=\"email\" formControlName=\"email\" class=\"form-control\"\r\n                placeholder=\"Email address\" email>\r\n            </div>\r\n            <small *ngIf=\"sf.form.controls.email.touched && !sf.form.controls.email.valid\" class=\"text-danger\">Valid\r\n              email address is required</small>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6\">\r\n            <div class=\"form-group\">\r\n              <label for=\"inputPassword\">Password <span class=\"text-danger\">*</span></label>\r\n              <div class=\"input-group mb-3\">\r\n                <input [type]=\"!isVisible?.password?'password':'text'\" id=\"inputPassword\" name=\"password\"\r\n                  formControlName=\"password\" class=\"form-control\" placeholder=\"Password\" required>\r\n                <div class=\"input-group-append\" id=\"button-addon3\">\r\n                  <button class=\"btn btn-outline-primary border\" type=\"button\"\r\n                    (click)=\"isVisible.password = !isVisible.password\">\r\n                    <i class=\"fa\" [ngClass]=\"{'fa-eye':!isVisible.password, 'fa-eye-slash':isVisible.password}\"\r\n                      aria-hidden=\"true\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <password-strength-meter\r\n                *ngIf=\"sf.form.controls.password.value && sf.form.controls.password.value.length>0\"\r\n                [password]=\"sf.form.controls.password.value\"></password-strength-meter>\r\n            </div>\r\n            <div *ngIf=\"sf.form.controls.password.touched\" class=\"text-danger\">\r\n              <small *ngIf=\"!sf.form.controls.password.valid\">Password is required</small><br />\r\n              <small *ngIf=\"!sf.form.controls.password.valid\">Password should be at least 8 characters long and should\r\n                contain one number,one uppercase letter and one special character</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-6\">\r\n            <div class=\"form-group\">\r\n              <label for=\"inputPassword\">Confirm Password <span class=\"text-danger\">*</span></label>\r\n              <!-- <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" formControlName=\"confirmPassword\"\r\n                  class=\"form-control\" placeholder=\"Password\" required> -->\r\n              <div class=\"input-group mb-3\">\r\n                <input [type]=\"!isVisible?.confirmPassword?'password':'text'\" id=\"confirmPassword\"\r\n                  name=\"confirmPassword\" formControlName=\"confirmPassword\" class=\"form-control\" placeholder=\"Password\"\r\n                  required>\r\n                <div class=\"input-group-append\" id=\"button-addon3\">\r\n                  <button class=\"btn btn-outline-primary border\" type=\"button\"\r\n                    (click)=\"isVisible.confirmPassword = !isVisible.confirmPassword\">\r\n                    <i class=\"fa\"\r\n                      [ngClass]=\"{'fa-eye':!isVisible.confirmPassword, 'fa-eye-slash':isVisible.confirmPassword}\"\r\n                      aria-hidden=\"true\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <small *ngIf=\"sf.form.controls.confirmPassword.touched &&!sf.form.controls.confirmPassword.valid\"\r\n              class=\"text-danger\">Password doesn't match</small>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <!-- <div class=\" col-lg-12\">\r\n            <div class=\"form-check \">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\">\r\n              <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n                Yes, I want to recieve lottery Display emails\r\n              </label>\r\n            </div>\r\n          </div> -->\r\n          <div class=\" col-lg-12\">\r\n            <div class=\"form-check \">\r\n              <input class=\"form-check-input\" type=\"checkbox\" value=\"true\" id=\"agreeTerms\"\r\n              name=\"agreeTerms\" formControlName=\"agreeTerms\">\r\n              <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n                I agree to all the <a href=\"javascript:void(0)\"  [routerLink]=\"['../terms']\" target=\"_blank\"> Terms and Conditions</a>\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-lg-12\"><button type=\"submit\" form=\"signupForm\" class=\"btn btn-primary\" [disabled]=\"!sf.form.valid\">Create the Account</button><br>\r\n            <p class=\"mt-2\">Already have an account? <a class=\"link\" href=\"javascript:void(0)\" (click)=\"onLogin()\">Log\r\n                in</a></p>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"signup-brands\">\r\n          <a class=\"img-link\" href=\"\"><img src=\"../../../assets/apple-icon.svg\"></a>\r\n          <a class=\"img-link\" href=\"\"><img src=\"../../../assets/fb-icon.svg\"></a>\r\n          <a class=\"img-link\" href=\"\"><img src=\"../../../assets/google-icon.svg\"></a>\r\n        </div> -->\r\n      </form>\r\n    </div>\r\n\r\n    <!-- col- elements here -->\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidationErrors, AbstractControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { CONFIG } from 'src/app/config';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'ibss-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n\r\n  @Output('toggleSection') toggleSection = new EventEmitter();\r\n\r\n  config: typeof CONFIG = CONFIG;\r\n  currentStep = 1;\r\n  totalStep = 1;\r\n  stepPercent = \"25%\";\r\n  @ViewChild('sf') sf:any;\r\n  separateDialCode = true;\r\n  signupForm = new FormGroup({\r\n    firstName: new FormControl(\"\", [Validators.required, Validators.max(75)]),\r\n    middleName: new FormControl(\"\", [Validators.max(75)]),\r\n    lastName: new FormControl(\"\", [Validators.required, Validators.max(75)]),\r\n    mobile: new FormControl(\"\", [Validators.required, Validators.pattern(\"^\\\\+[1-9]{1,6}\\-[d0-9]{10,14}$\")]),\r\n    email: new FormControl(\"\", [Validators.required, this.checkEmail()]),\r\n    password: new FormControl(\"\", [Validators.required, this.checkPassword()]), // Validators.pattern(\"^(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,20}$\")\r\n    confirmPassword: new FormControl(\"\", [\r\n      Validators.required,\r\n      this.matchValues('password'),\r\n    ]),\r\n    agreeTerms: new FormControl(false, [Validators.requiredTrue]),\r\n  });\r\n\r\n  isVisible = {\r\n    password: false,\r\n    confirmPassword: false,\r\n  }\r\n  constructor(\r\n    public router: Router,\r\n    public authService: AuthService,\r\n    public toastr: ToastrService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.signupForm.controls.password.valueChanges.subscribe(() => {\r\n      this.signupForm.controls.confirmPassword.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n  onLogin() {\r\n    this.toggleSection.emit('login');\r\n  }\r\n\r\n  gotToStep(action:any) {\r\n\r\n    if (action === 'prev') {\r\n      this.currentStep--;\r\n    } else {\r\n      this.currentStep++;\r\n    }\r\n\r\n    this.stepPercent = ((this.currentStep / this.totalStep) * 100) + \"%\";\r\n  }\r\n\r\n  onSignup() {\r\n    //this.router.navigate(['/login']);\r\n    let d = this.signupForm.controls;\r\n\r\n    let isValid = true;\r\n    for (let x in d) {\r\n      if (!d[x].valid) {\r\n        isValid = false;\r\n      }\r\n    }\r\n\r\n    if (isValid) {\r\n      var signupData = {\r\n        \"serviceData\": {\r\n          \"address1\": \"\",\r\n          \"address2\": \"\",\r\n          \"branchCode\": \"\",\r\n          \"categoryCode\": \"WEBSITE\",\r\n          \"city\": \"\",\r\n          \"country\": \"\",\r\n          \"groupCode\": \"WEBASIC\",\r\n          \"idNo\": \"\",\r\n          \"idType\": \"\",\r\n          \"phone\": \"\",\r\n          \"pin\": \"\",\r\n          \"roleType\": \"PA\",\r\n          \"state\": \"\",\r\n          \"status\": 0,\r\n          \"systemId\": \"\",\r\n          \"userId\": \"\",\r\n          \"emailID\": this.signupForm.controls['email'].value,\r\n          \"loginMaster\": [\r\n            {\r\n              \"loginId\": this.signupForm.controls['email'].value,\r\n            }\r\n          ],\r\n          \"firstName\": this.signupForm.controls['firstName'].value,\r\n          \"middleName\": this.signupForm.controls['middleName'].value,\r\n          \"lastName\": this.signupForm.controls['lastName'].value,\r\n          \"mobile\": this.signupForm.controls['mobile'].value,\r\n          \"pinMaster\": {\r\n            \"password\": this.signupForm.controls['password'].value,\r\n          }\r\n        }\r\n      }\r\n      console.log('signupData', signupData);\r\n      console.log('signupForm', d, this.sf);\r\n      console.log('signupForm', d, this.sf.valid, this.sf.form.valid);\r\n\r\n      this.authService.signup(signupData)\r\n        .subscribe((res: any) => {\r\n          console.log('signup success', res);\r\n\r\n          if (res.error && res.error.responseCode == 0) {\r\n            this.resetForm();\r\n            this.toastr.success('Registered Successfully. Kindly login to proceed');\r\n          } else {\r\n            if (res.error) {\r\n              if (res.error.businessValidation.length > 0) {\r\n                for (let i = 0; i < res.error.businessValidation.length; i++) {\r\n                  this.toastr.error(res.error.businessValidation[i].errorDesc);\r\n                }\r\n              }\r\n\r\n              if (res.error.dataValidation.length > 0) {\r\n                for (let i = 0; i < res.error.dataValidation.length; i++) {\r\n                  this.toastr.error(res.error.dataValidation[i].errorDesc);\r\n                }\r\n              }\r\n            } else if (res.responseCode == -1) {\r\n              this.toastr.error(\"Sigup Failed, Please try again after sometimes\");\r\n            }\r\n\r\n          }\r\n        }, (error) => {\r\n          console.log('signup failure', error);\r\n          this.toastr.error(\"Sigup Failed, Please try again after sometimes\");\r\n        })\r\n      // this.router.navigate(['/dashboard']);\r\n    }\r\n\r\n  }\r\n\r\n  resetForm() {\r\n    this.signupForm.reset();\r\n    this.isVisible = {\r\n      password: false,\r\n      confirmPassword: false,\r\n    }\r\n  }\r\n\r\n  matchValues(\r\n    matchTo: string // name of the control to match to\r\n  ): (AbstractControl:any) => ValidationErrors | null {\r\n    return (control: any): ValidationErrors | null => {\r\n      return !!control.parent &&\r\n        !!control.parent.value &&\r\n        control.value === control.parent.controls[matchTo].value\r\n        ? null\r\n        : { isMatching: false };\r\n    };\r\n  }\r\n\r\n  checkEmail(): (AbstractControl:any) => ValidationErrors | null {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return !!control.value &&\r\n        this.config.regEx.email.test(control.value.toLowerCase())\r\n        ? null\r\n        : { isMatching: false };\r\n    };\r\n  }\r\n\r\n  checkPassword(): (AbstractControl:any) => ValidationErrors | null {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      return !!control.value &&\r\n        this.config.regEx.password.test(control.value)\r\n        ? null\r\n        : { isMatching: false };\r\n    };\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid\" class=\"auth-portal\">\r\n  <div class=\"row no-gutters\">\r\n    <div class=\"col-lg-4\" style=\"z-index: 2;\">\r\n      <div class=\"login-logo\">\r\n        <img src=\"../../assets/tech-intent-logo.svg\" >\r\n      </div>\r\n      <div class=\"button-sec-auth\">\r\n      <div class=\"d-table-cell\">\r\n        <button class=\"btn btn-auth\" [ngClass]=\"{'active':activeComp==='login' }\" (click)=\"onToggle('login')\">Login</button>\r\n        <button class=\"btn btn-auth\" [ngClass]=\"{'active':activeComp==='signup' }\" (click)=\"onToggle('signup')\">Signup</button>\r\n      </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-lg-8 auth-content\">\r\n      <ibss-login *ngIf=\"activeComp==='login'\" (toggleSection)=\"onToggle($event)\"></ibss-login>\r\n      <ibss-signup *ngIf=\"activeComp==='signup'\" (toggleSection)=\"onToggle($event)\"></ibss-signup>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthComponent } from './auth.component';\n\nconst routes: Routes = [\n  { path: '', component:AuthComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n  activeComp = \"login\";\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onToggle(section: any) {\r\n    this.activeComp ='';\r\n    setTimeout(()=>{\r\n      this.activeComp = section;\r\n    })\r\n  }\r\n}\r\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthComponent } from './auth.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgOtpInputModule } from 'ng-otp-input';\r\nimport { PasswordStrengthMeterModule } from 'angular-password-strength-meter';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AuthComponent,\r\n    LoginComponent,\r\n    SignupComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgOtpInputModule,\r\n    PasswordStrengthMeterModule\r\n  ]\r\n  \r\n})\r\nexport class AuthModule { }\r\n"],"sourceRoot":"webpack:///"}